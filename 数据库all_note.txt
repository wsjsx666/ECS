庞丽静  静静
panglj@tedu.cn 
工作岗位  DBA
第三阶段 数据库管理15   安全与监控6   
笔记  TMOOC  PPT  案例
+++++++++++++++++++++++++++++
vnc 172.40.50.117   7000

ftp://172.40.50.117/nsd1811
ftp://172.40.50.117/2018/soft

一 、构建MySQL服务器
什么数据库？
数据包括： 视频  音频 图片 文本文件
谁在使用数据库服务： 购物网站 娱乐网站 金融机构 
提供数据库服务的软件：
如何选择数据库服务软件：开源  商业  
是否跨平台 Unix  Linux(redhat7)  windows
11:00  上课
使用mysql软件搭建数据库服务器
   装包
     14  tar -xvf mysql-5.7.17.tar 
     15  ls *.rpm
     20  yum -y  install mysql-community-*.rpm
     21  rpm -qa  | grep  -i mysql
   启动服务
      28  systemctl status mysqld
      29  systemctl start mysqld
      30  systemctl enable mysqld
      31  systemctl status mysqld
   查看运行信息
       33  ps -C mysqld
       34  netstat -utnlp | grep  :3306
   使用初始密码登陆
       ]# grep -i password /var/log/mysqld.log
       ]# mysql  -uroot -p'+uv51sDk6nIZ'
   修改登陆密码
       mysql> alter user root@"localhost"  identified  by "123qqq...A";
       mysql> show  databases;
       mysql> quit
   使用新密码登陆
       ]# mysql  -uroot -p123qqq...A
       mysql>

  修改密码策略
  	mysql> show variables  like "%password%";
  	mysql> set global validate_password_policy=0;
  	mysql> set global validate_password_length=6;
  	mysql> alter user  root@"localhost" identified by "123456";
  	mysql> quit
  	]# mysql  -uroot -p123456
  	mysql> quit

  	]#vim /etc/my.cnf
  	   [mysqld]
	   validate_password_policy=0
	   validate_password_length=6
       :wq

  	]# systemctl restart  mysqld
  	]# mysql  -uroot -p123456
  	   mysql> show variables  like "%password%";
  
11:30 讲 新课

mysql> create database db1;
mysql> use db1;
mysql> create table t1(name char(10),age int , sex char(10));
mysql> show tables;
mysql> system ls /var/lib/mysql/db1/
mysql> desc db1.t1;
mysql> insert into t1  values ("bob", 19 , "boy");
mysql> insert into t1  values ("lucy", 16 , "girl");
mysql> select  * from t1;
mysql> update  db1.t1 set age=21 ;
mysql> update  db1.t1 set  sex="gril"  where name="bob";
mysql> delete from  db1.t1 where  name="lucy";
mysql> delete from  db1.t1;
mysql> drop  table t1;
mysql> show tables;
 建表时指定表使用的字符集
   mysql> create table 学生表( 
          姓名 char(10), 
          住址 char(20)  
          )DEFAULT CHARSET=utf8 ;

mysql> insert into 学生表 values ("张三丰" ,"武当山");

mysql> select  * from  学生表;

数值类型
   mysql> create table  t2( age  tinyint );

   mysql> create table  t2( age  tinyint unsigned);

   mysql> create  table  t3( pay float(5,2) );

   mysql> insert into t3 values(11.28);

字符类型
mysql> create  table  t7 (name char(20),homedir  char(15), mail varchar(30));
Query OK, 0 rows affected (0.23 sec)

mysql> insert into t7 values("plj","beijing","panglj@tedu.cn");
Query OK, 1 row affected (0.02 sec)

mysql> select  * from t7;

mysql> create  table  t8(
    -> name char(15),
    -> age tinyint unsigned,
    -> birthday date,
    -> upclass time,
    -> party  datetime,
    -> cs year
    -> );
mysql>  insert into  t8 
values("bob",17,20191120,083000,20190214203000,1990);

mysql> select  * from  t8;   

使用2位数字给year类型字段赋值
mysql> insert into  t8(cs) values(88);
mysql> insert into  t8(cs) values(57);
mysql> select  * from  t8;   


使用时间函数 获取数据赋值
mysql> insert into db1.t8  
values("tom",30, curdate(),curtime(),now(),year(now()) );

mysql> select  * from  t8;   

datetime与 timestamp 的区别
mysql> create table t9(
    -> meetting  datetime,
    -> party  timestamp
    -> );

mysql> 
mysql> insert into  t9 values(20190128135823 , 20190504180000);
mysql> insert into  t9(meetting)  values(20190128135823);
mysql> insert into  t9(party)  values(20190128135823);
mysql> select  * from  t9;

枚举类型
mysql> create table  t10(
    -> name char(10),
    -> sex  enum("boy","girl"),
    -> likes set("hgn","game","sleep","eat","music")
    -> );

mysql> insert into  t10 values("bob","man","hgn,game");
ERROR 1265 (01000): Data truncated for column 'sex' at row 1

mysql> insert into  t10 values("bob","boy","hgn,game,a");
ERROR 1265 (01000): Data truncated for column 'likes' at row 1

mysql> insert into  t10 values("bob","boy","hgn,game,eat");

mysql> select  * from  t10;

++++++++++++++++++++++++++++++++++++
知识的总结
一 数据库介绍
二 搭建mysql数据库服务器
三 数据库服务器基本使用 
四 mysql常用数据类型

练习
前任信息表 （自定义表结构）
50  ～ 56 运行mysql数据库服务

+++++DBA1_day02+++++++++++++++++++++++++++++++

约束条件  练习10分钟到    09：40  + 3分钟
    create  database db2;
    use  db2;
    create   table  t1 (
    name char(10) not null ,
    age tinyint  unsigned  not null  default 18,
    likes set("eat","game","film")  default "eat,game"
    );
mysql> insert into t1(name) values("bob");
mysql> insert into t1  values("tom",21,"film,game");

mysql> insert into t1  values (null,31,"film");
ERROR 1048 (23000): Column 'name' cannot be null

mysql> insert into t1  values ("",31,"film");
mysql> insert into t1  values ("null",31,"film");
mysql> insert into t1  values ("jack",39,null);

mysql> select  * from  t1;

修改表结构

mysql> alter table  t1 add  class  char(7) default "nsd1811" first;

mysql> alter table t1  add email varchar(30), add qq varchar(11);

mysql> alter table  t1 
       add  sex enum("man","woman","no") default "no" after name;

mysql> desc t1;
mysql> select  * from  t1;

练习5分钟 到 10：32     + 3 分钟  

mysql> alter table  t1 
       modify sex enum('man','woman','no') not null  default  "no";

mysql> alter table t1 modify class varchar(15) ;

mysql> alter table t1 
       modify age tinyint(3) unsigned not null default 18 after name;

mysql> desc  t1;
mysql> select * from t1;

mysql> alter table  t1 change email mail varchar(30);

mysql> alter table  t1 drop mail;

mysql> alter table  t1  drop sex , drop age ;

mysql> show tables;
mysql> alter table  t1 rename t2;
ERROR 1050 (42S01): Table 't2' already exists
mysql> 
mysql> alter table  t1 rename stuinfo;
mysql> show tables;
mysql> system  ls /var/lib/mysql/db2
mysql> select  * from stuinfo;
mysql> desc  stuinfo;
+++++++++++++++++++++++
三、MySQL 键值

3.1 INDEX普通索引
3.1.1 使用规则

3.1.2 创建索引
		建表时创建
		mysql> create table t1(
    		-> name char(10),
    		-> age int,
    		-> class  char(7),
    		-> index(name),index(age)
    		-> );
		mysql> desc t1;
		mysql> show index from t1\G;

		mysql> drop index  name on  t1;
		mysql> show index from t1\G;
		mysql> desc t1;
		
	 	在已有表里创建索引 
		mysql> desc t2;
                mysql> show index from t2\G;

		mysql> create  index  age on  t2(age);
		mysql> create  index  abc on  t2(name);

		mysql> desc t2;
		mysql> show index from t2\G;

primary key主键
		1 使用规则
		2 创建主键
			2.1 建表时创建主键
			mysql> create table t3(
    			        -> stu_num char(9),
    				-> name char(10),
    				-> age int,
    				-> primary key(stu_num)
    				-> );
    			mysql> create table  t4(
                               stu_num char(9) primary key , 
			       name char(10),
                               age int
				);
			mysql> desc t3;
			mysql> desc t4;
	验证主键
	mysql> insert into t3  values("nsd181101","bob",21);
	mysql> insert into t3  values("nsd181101","tom",19);
        ERROR 1062 (23000): Duplicate entry 'nsd181101' for key 'PRIMARY'
        mysql> insert into t3  values(null,"jerry",19);
        ERROR 1048 (23000): Column 'stu_num' cannot be null

			2.2 在已有表里添加主键
			   mysql> delete from stuinfo;
		
			   mysql> alter table  stuinfo 
		             add stu_num char(9) primary key after class;
                        
		           mysql> desc stuinfo;
		4 删除主键
		  mysql> desc t3;
		  mysql> alter  table  t3 drop  primary key;
		  mysql> desc t3;
	mysql> insert into t3  values("nsd181101","tom",19);
        mysql> insert into t3  values(null,"jerry",19);
	ERROR 1048 (23000): Column 'stu_num' cannot be null
        mysql> select  * from  t3;
				
		5 创建复合主键+验证
		mysql> create table t5(
    			-> name char(10),
    			-> class char(7),
    			-> status enum("yes","no"),
    			-> primary key(name,class)
    			-> );
			mysql> desc t5;
		mysql> insert into  t5 values("bob","nsd1811","yes");

		mysql> insert into  t5 values("bob","nsd1811","no");
		ERROR 1062 (23000): Duplicate entry 'bob-nsd1811' for key 'PRIMARY'

		mysql> insert into  t5 values("bob","nsd1812","no");

		mysql> insert into  t5 values("tom","nsd1812","yes");

		mysql> select  * from  t5;


		6 与auto_increment连用 (作用是让字段的值自增长)
			字段类型必须是数值类型、主键
			
		  mysql> create table t6(
    			-> id int primary key  auto_increment,
    			-> name char(10),
    			-> sex  enum("man","woman")
    			-> );
		  mysql> desc t6;
		  mysql> insert into  t6 (name,sex) values("jack","woman");
		  mysql> insert into  t6 (name,sex) values("bob","woman");
		  mysql> insert into  t6 (name,sex) values("lucy","woman");
		  mysql> select  * from t6;

		  mysql> insert into  t6 values(1,"lili","woman");
		  mysql> insert into  t6 values(null,"lili","woman");
		  mysql> select  * from  t6;
		  
		  mysql> insert into  t6 values(9,"lili","woman");
		  mysql> select  * from  t6;
		 
		  mysql> insert into  t6 (name,sex) values("jim","woman");
		  mysql> select  * from  t6;
		
		  mysql> delete from  t6;
		  mysql> insert into  t6 (name,sex) values("jim","woman");
		  mysql> delete from  t6;
		  mysql> show create table t6;		  
   

		  删除有自增长设置的主键
		  mysql> desc  t6;
 		  mysql> alter table t6 drop  primary key;
ERROR 1075 (42000): Incorrect table definition; there can be only one auto column and it must be defined as a key

		  mysql> alter table  t6 modify id int not null ;
		  mysql> desc t6;
		  mysql> alter table t6 drop  primary key;
 		  mysql> desc t6;

 
 外键 forign key
	外键的作用
	外键规则

	创建外键
 	mysql> create table ygt(
            	 ygt_id int  primary key  auto_increment,
		 name char(10),
		 sex  enum("b","g")
		)engine=innodb;

	mysql> insert into ygt(name,sex)
	        values
	         ("tom","b"),("lucy","g"),("jack","g");
	
        mysql> select  * from ygt;

        mysql> create table  gzt(
		gzt_id int,
		pay float(7,2),
		foreign key(gzt_id) references ygt(ygt_id)
		on update cascade on delete cascade
		)engine=innodb;
	
	mysql> desc gzt;
	mysql> show create table  gzt;
                                        休息到 17：10 

	验证外键   练习 到 17：32
	mysql> insert into  gzt values(4,20000); 报错
	mysql> insert into  gzt values(1,20000);
	mysql> insert into  gzt values(2,25000);
	mysql> insert into  gzt values(3,28000);
	mysql> select  * from gzt;

	mysql> insert into ygt (name,sex)values("bob","b");
	mysql> select * from ygt;
	
	mysql> insert into  gzt values(4,20000);可以了
	mysql> select  * from gzt;

	mysql> update ygt set ygt_id=8 where ygt_id=2;
	mysql> select  * from ygt;
	mysql> select  * from gzt; 同步更新

	mysql> delete from ygt where ygt_id=4;
	mysql> select  * from ygt;
	mysql> select  * from gzt; 同步删除

	不允许重复赋值和赋NULL值
	mysql> mysql> alter table gzt add primary key(gzt_id);
	mysql> select  * from gzt;
	mysql> insert into gzt values(1,50000); 重复赋值报错
	mysql> insert into gzt values(null,50000);赋NULL值报错

	删除外键	
		mysql> show create table gzt;
		mysql> alter table gzt drop foreign key gzt_ibfk_1;
                mysql> insert into gzt values(99,50000);
			Query OK, 1 row affected (0.03 sec)
		mysql> insert into gzt values(98,50000);
			Query OK, 1 row affected (0.02 sec)

		mysql> select  * from gzt;
    
	mysql> delete from gzt where gzt_id=98;
	mysql> delete from gzt where gzt_id=99;
	mysql> select  * from ygt;
	
	mysql> alter table gzt  
	      add foreign key(gzt_id) references ygt(ygt_id) 
	      on update cascade on delete cascade;
	
       外键使用注意事项 : 当表中有外键时，参考的表和字段都不被删除
	删除查看表的所以记录时，外键表的记录也全部自动删除。	

++++DBA1_DAY02知识点总结         
一 字段约束条件
二 修改表结构
三 mysql键值类型 index | primary key |  foreign key


++++DBA1_DAY03

 车：轮胎  框架  内饰 发动机

一、MySQL存储引擎
  mysql服务功能模块（体系结构）
  管理工具  连接池  SQL接口 分析器  优化器   查询缓存  存储引擎 文件系统

	1.1 存储引擎介绍
	    MySQL服务软件自带的功能程序，处理表的处理器
            不同的存储引擎有不同的功能和数据存储方式

	1.2 查看数据库服务支持的存储引擎 
	    show engines;
            
            查看已有的表使用的存储引擎
	    show  create table 表名；

	1.3 设置数据库服务默认使用的存储引擎 
	    ]# vim  /etc/my.cnf
		[mysqld]
		default-storage-engine=myisam
		:wq
	    ]# systemctl restart  mysqld
	    ]# mysql  -uroot -p123456
	    mysql> show  engines;

	    修改已有的表使用的存储引擎
	      alter table 表名 engine=存储引擎;

	    定义表使用的存储引擎
	     creat table 表名（字段名列表）engine=存储引擎;
 
	1.4 常用存储引擎的特点
	    myisam存储引擎的特点
		表名.frm  desc 表名;
		表名.MYI  index(name)
		表名.MYD  select  * from 表名;

		支持表级锁  不支持事务、事务回滚、外键


	    innodb存储引擎的特点
		表名.frm  desc 表名;
		表名.ibd  index(name)+select  * from 表名;

		事务日志文件：记录对innodb存储引擎的表执行过的操作
		ib_logfile0
		ib_logfile1
		ibdata1
		
		支持行级锁定 支持事务、事务回滚、外键

	
          
	    行级锁介绍？ 只给访问的每1行记录分别加锁
	    表级锁介绍？ 只要对表做访问，就把一张表加锁。

	    为什么要加锁？ 解决并发访问冲突问题。
	    锁类型？a表 select insert update delete
           	读锁 共享锁   pc1 --->mysqld ---> select * from a where id<=2;
			      pc2 --->mysqld ---> select * from a where id<=2;
			      pc3 --->mysqld ---> update a set id=3 where id=2;
	   	写锁 排它锁或叫互斥锁
			      pc4 --->mysqld ----> insert into b values(1);
			      pc5 --->mysqld ----> delete insert  update
		
	    查看当前表锁状态信息 mysql> show  status like "%table_lock%";

	    事务介绍？对数据的一次访问
            事务回滚介绍？ 事务执行过程中任意一步操作失败，
                           会恢复之前的所有操作。
         
            事务的特点？ACID
	    
            验证事务特点？
	    终端1 连接数据库服务 
           	 ]#mysql -uroot  -p123456
            	create database db3;
		use db3;
		create table t6(id int)engine=innodb;
		insert into  t6 values(999);
		select  * from  t6;
		show variables like "autocommit";
		set autocommit=off;
            终端2 连接数据库服务 
	    	]# mysql -uroot  -p123456
	     	mysql> select  * from db3.t6;
	    终端1  mysql> delete from db3.t6;
		   mysql> select  * from db3.t6 ; 看不到数据了
            终端2  mysql> select  * from  db3.t6;  可以看到数据（隔离性）

	    终端1  mysql> rollback; 数据回滚
		   mysql> select  * from db3.t6 ; 看到数据了

            终端1  mysql> insert into db3.t6 values(999);
		   mysql> select  * from db3.t6; 看到新数据

	    终端2  ysql> select  * from db3.t6; 看不到新数据（因为终端1没提交）

            终端1 mysql> commit ;  执行提交命令
	    终端2 mysql> select  * from db3.t6; 可以看到数据了 (持久性)
	
	1.5 生产环境下建表时如何决定表使用那种存储引擎
	查询(select) 操作多的表适合使用myisam存储引擎 节省系统资源
        写（insert update delete）操作多的表适合使用innodb存储引擎  并发访问量大		

二、数据导入/导出
	2.1 检索目录
		查看默认检索目录  mysql> show variables  like  "secure_file_priv";
		
		修改默认检索目录      （10分钟 到 14：30 ）
		]# vim /etc/my.cnf
		  [mysqld]
		    secure_file_priv="/mydatadir"
		:wq
		]# mkdir /mydatadir
		]# chown  mysql /mydatadir
		]# systemctl restart mysqld

		]# mysql -uroot -p123456
		mysql> show variables  like  "secure_file_priv";
              	

	2.2  数据导入
		作用：把系统文件的内容存储到数据库服务器的表里
		命令格式：
		注意事项：
		数据导入  (15分钟 到 15：05)   15:20 上课
	               例子：把 /etc/passwd 文件的内容存储到db3库下的user表里 
			     并给每1行记录添加编号。
		 mysql> create  table db3.user(
    			-> name char(35),
    			-> password char(1),
    			-> uid int,
    			-> gid int,
    			-> comment char(150),
    			-> homedir char(100),
    			-> shell varchar(100),
    			-> index(name)
    			-> );
		mysql> desc db3.user;		
		mysql> system cp /etc/passwd  /mydatadir/
		mysql>  load data infile "/mydatadir/passwd" 
			into table db3.user  
			fields terminated by ":" lines terminated by "\n";
		
		mysql> alter table  db3.user add id int primary key auto_increment first;
		
		mysql> select  * from db3.user;
		mysql> select  * from db3.user where id = 3;

	2.3 数据导出
		作用：把表记录存储到系统文件里
		命令格式？
		注意事项?
		数据导出 例子 （练习到 15：44 ）
		mysql> select  * from db3.user into outfile "/mydatadir/a1.txt" ;
		mysql> system cat /mydatadir/a1.txt


		mysql> select  * from db3.user where id <= 5 
			into outfile "/mydatadir/a2.txt" ;

		mysql> system cat /mydatadir/a2.txt

		mysql> select name,uid,shell from db3.user where id <= 5 
		       into outfile "/mydatadir/a3.txt" fields terminated by "#";

		mysql> system cat /mydatadir/a3.txt


		mysql> select name,uid,shell from db3.user where id <= 5
			into outfile "/mydatadir/a4.txt" 
			fields terminated by "#" lines terminated by "!!!";

		mysql> system cat /mydatadir/a4.txt

三、管理表记录  休息到 16：10
	3.1 添加新记录 insert into
	
	mysql> insert into  user  
	       values
	       (42,"bob","x",1001,1001,"test user","/home/bob","/bin/bash");

	mysql>  insert into  user(name,password,uid,gid,comment,homedir,shell)  
	        values
		("bob","x",1001,1001,"test user","/home/bob","/bin/bash");

        mysql> insert into  user(name,uid) values ("jim",2001);

        mysql>  insert into  user(name,uid)
		values
		("jim",2001),("lucy",3001),("jack",3002);

	3.2 查询表记录 select  字段名列表 from 表名 where 条件；

	3.3 更新字段   update 表名 set 字段名列表;
		       update 表名 set 字段名列表 where 条件； 

		mysql> update user  set password="f" ,comment="test user";
		mysql> update user set comment="root" where id = 1;

	3.4 删除记录   
		delete  from 表名 where 条件;
		delete  from 表名;

		mysql> select * from user where gid  is null;

四、匹配条件 (select update  delete)
	4.1 基本条件
		数值比较
		mysql> select  * from  user where id <=3;
		mysql> select name,uid  from user where uid =  10 ;
		mysql> select name,uid  from user where uid <=  10 ;
		mysql> select name,uid,gid from user where uid = gid;
		mysql> select name,uid,gid from user where uid != gid;
		mysql> select name,uid,gid from user where 1 < 2;

		字符比较/匹配空/非空
		mysql> select name from user where name = "mysql";
		mysql> select name,shell from user where shell = "/bin/bash";
		mysql> select id from user where shell is null;
		
		逻辑匹配 (有多个查询条件)
		逻辑与 and  多个查询条件 同时成立
		逻辑或 or   多个查询条件 某个条件成立即可	
		
mysql> select name,uid,shell from user 
       where
       name="apache"  and  uid = 88  and  shell =  "/sbin/nologin";

mysql> select name,uid,shell from user  
       where 
       name="apache"  or  uid = 88 or shell =  "/sbin/nologin";

	        逻辑非 ！ 或 not     取反
	       mysql> select name from user where name != "mysql";
	       mysql> select id from user where shell is not null;
	       
		范围内匹配
mysql> select name from user 
	where  name in ("root","adm","rsync","bob");
		
mysql> select name,uid from user where  uid in (1,7,3);

mysql> select name,shell from user     		       
       where shell not in ("/bin/bash","/sbin/nologin");

mysql> select  * from user where id  between 10 and 20;
		
		去重显示
		mysql> select  distinct  shell from user;

	4.2 高级匹配
	      模糊查询
		mysql> select  name from  user where name like '____';
		mysql> select  name from  user where name like '%r%';
		mysql> select  name from  user where name like 'r%';
		mysql> select  name from  user where name like '__%__';
	      正则表达式
		mysql> select  name from  user where name regexp '^r|^a';
		mysql> select  name from  user where name regexp '^r.*t$';
		mysql> insert into user(name)values("jim9"),("j7im"),("ji2m");
		mysql> select  name from  user where name regexp '[0-9]';

		四则运算  +  -  *  /  %
		mysql> update user set uid=uid+1   where uid <=10;
		mysql> select name ,uid,gid,uid+gid  ruslet from user 
                       where name="root";
		
	     () 提供条件的优先级
		mysql> select name ,uid,gid, (uid+gid)/2 pjz 
		       from user where name="mysql";

	4.3 操作查询结果

++++++DBA1_day03 知识点回顾
mysql存储引擎
数据导入
数据导出
匹配条件 （select  update  delete）
       数值比较 字符比较 空  非空  正则匹配  模糊查询  逻辑比较
       四则运算 去重显示 范围内比较

操作查询结果
	聚集函数  (练习到 09：20)
		sum(字段名) avg(字段名) min(字段名) max(字段名) count(字段名)

	mysql> select count(name) from user;
	mysql> select count(name) from user where  shell="/bin/bash";
	mysql> select avg(uid) from user;
	mysql> select sum(uid) from user;
	mysql> select min(uid) from user;
	mysql> select max(uid) from user;
	mysql> select min(uid) from user where shell != "/bin/bash";
	mysql> select max(uid),max(gid) from user;
	mysql> select count(*) from user;

	排序  order by 字段名
	mysql> select name,uid from user where  uid between 10 and 1000;

	mysql> select name,uid from user where  uid between 10 and 1000 
	       order by uid ;

	mysql> select name,uid from user 
	       where  uid between 10 and 1000 order by uid  desc;

	分组  group by 字段名
	mysql> select shell  from user 
	       where  uid between 10 and 1000  group by  shell;

	mysql> select shell  from user  group by shell;

	过滤数据  having 条件表达式
	mysql> select name from user where  uid between 10 and 60000 ;
	
        mysql> select name from user where  uid between 10 and 60000 
		having  name="rsync";	

	限制显示行数  limit
	mysql> select name from user where  uid between 10 and 6000;
	mysql> select name from user where  uid between 10 and 6000 limit 2;
	mysql> select name from user where  uid between 10 and 6000 limit 4;

	mysql> select name from user where  uid between 10 and 6000 limit 4,1;	     
        mysql> select name from user where  uid between 10 and 6000 limit 4,3;

综合应用
mysql> select  * from user  where  shell != "/bin/bash" order by uid desc  limit 3;

mysql> select  * from user  where  shell != "/bin/bash" order by uid limit 1;

   			休息到 10：15  
+++++DBA1_day04++++++

一、多表查询
	1.1 复制表 
		作用： 1 备份表  2 快速建表
		命令格式  create  table 库名.表名  SQL查询命令；
		
	例子： (10分钟 到 10：47)
	create database db4;
	use db4;

	create table userbak  select  * from db3.user;
	select  * from userbak;
	
	create table user1  select  * from db3.user where 1  = 2;
	desc  user1;
	select  * from  user1;

	mysql> create table user3  select name,uid,shell from db3.user 
		order by uid desc limit 5;
	mysql> select  * from user3;

	mysql> create table user4  select name,uid,shell from db3.user where 1 = 2;
	mysql> select * from user4;
	mysql> desc  user4;
	
 服务对象 学生
	名字 学号
 缴费表 
 班级表
 成绩表
 就业表


	1.2 多表查询方法
		1 多表查询 
		 select  字段名列表 from  表名列表； 笛卡尔集 （2个表记录个数的乘积）

		 select  字段名列表 from  表名列表 where 匹配条件；仅显示与条件匹配的记录
		 例子：
		 mysql> create table  t1  
			select name,uid,shell,password from db3.user limit 3;

		 mysql> create table t2  
			select  name ,gid,uid,homedir from db3.user limit 5;

		 mysql> select  *  from  t1 , t2 ; 

		 mysql> select  t1.name , t1.uid , t2.name  from  t1,t2;
		 mysql> select  t1.name , t1.uid , t2.*  from  t1,t2;

		 mysql> select  *  from  t1 , t2  where t1.name = t2.name;
		 mysql> select  *  from  t1 , t2  where t1.name="root" and t2.name="root" ;

	5分钟  到  11:41 

		2 嵌套查询 （where子查询）
			命令格式 ： 
		        例子
		        mysql> select name , uid from userbak 
		               where  uid  < ( select  avg(uid) from userbak  );
			
			mysql> select name from db4.t2  
                        where 
                        name in ( select name from db3.user where shell != "/bin/bash" ); 

		3 左连接查询 left  join
			作用：查询条件成立时，以左表为主 显示查询记录
			命令格式：
				   select 字段名列表 from  
				   表名  left join 表名  on  匹配条件； 
		4 右连接查询 right join
			作用：查询条件成立时，以右表为主 显示查询记录
			命令格式：
				  select 字段名列表 from
				  表名1  right join 表名2  on  匹配条件；

			例子：  练习到 14：21 
			mysql> create table  t3  select name,uid,shell   
				from db3.user limit 3;
	
			mysql> create table  t4  select name,uid,shell   
				from db3.user limit 6;

			mysql> select  * from t3;
			mysql> select  * from t4;

			mysql> select  *  from  t3  left join  t4  on t3.uid = t4.uid;

			mysql> select  *  from  t3  right join  t4  on t3.uid = t4.uid;


二、MySQL服务图形管理工具 之 phpmyadmin
	2.1 连接数据库服务的方式：  命令行  web页面  图形工具
	2.2 软件介绍：
	2.3 安装phpmyadmin软件   15：30  讲新课
		部署步骤
			1  部署运行环境 lamp
				]#yum -y  install php  php-mysql  httpd
				]#systemctl  start httpd
   				]#systemctl  enable httpd
   				]#netstat  -utnlp  | grep  :80
			2  安装phpmyadmin软件
			     ]# tar -zxvf phpMyAdmin-2.11.11-all-languages.tar.gz
			     ]# mv phpMyAdmin-2.11.11-all-languages /var/www/html/admin
			3  修改软件的主配置文件
			     ]# cd /var/www/html/admin
			     ]# cp  config.sample.inc.php  config.inc.php 
			     ]# vim config.inc.php
				17 $cfg['blowfish_secret'] = 'plj123';
				31 $cfg['Servers'][$i]['host'] = 'localhost';
			     :wq
			4  在客户访问软件 
			   在浏览器里输入网址 http://192.168.4.50/admin

			5  使用数据库管理员登陆
				用户名 root
				密码 123456

			6  在图形界面里 管理数据
			   建库 建表 

三、用户授权与权限撤销 ( 50  51  52 )

	3.0 密码恢复数据库管理员密码   (练习15分钟 到 16：30)
	]# systemctl  stop mysqld
        ]# vim  /etc/my.cnf
        [mysqld]
                #validate_password_policy=0
                #validate_password_length=6
                skip_grant_tables    //跳过授权表运行服务
        :wq
        ]# systemctl  start mysqld
	]# mysql
	mysql> update  mysql.user 
    		-> set authentication_string=password("654321")    //新密码
    		-> where
    		-> host="localhost" and user="root";
	mysql> flush privileges;
	mysql> quit;
	]# systemctl  stop mysqld
	vim  /etc/my.cnf	
	[mysqld]
		validate_password_policy=0
		validate_password_length=6
		#skip_grant_tables
	:wq
	]# systemctl  start mysqld
	]# mysql  -uroot  -p654321   //使用新密码登陆
	mysql> exit

        修改数据库管理员root本机登陆密码
		[root@mysql50 ~]# mysqladmin  -hlocalhost -uroot -p  password  "abc123"
        	Enter password:输入旧密码

		]# mysql -uroot -pabc123
		mysql>

        休息到  16：45

	3.1 什么是授权  : 在数据库服务器上，添加连接用户 并设置权限

	3.2 授权命令格式：
		mysql> grant  权限列表  on  数据库名  to 用户名@“客户端地址”
		       identified by "密码"；

	3.3 授权库 mysql库 ：记录授权信息
				user表  记录已有的授权用户
				db表	记录已有的授权用户对数据库的访问权限
				tables_priv  记录已有的授权用户对表的访问权限
				columns_priv 记录已有的授权用户对字段的访问权限
	3.4 撤销权限命令格式：
		mysql> revoke 权限列表 on 数据库名 from 用户名@"客户端地址";

	3.5 删除授权用户
		mysql> drop user  用户名@"客户端地址";

	3.6 在数据库服务器50上添加授权用户	
		例子
		]# mysql -uroot -pabc123
		mysql> grant  all  on *.*  to mydba@"%" identified by "123456" 
               	       with grant option;
	
		mysql> select  * from mysql.user where user="mydba" \G;
		mysql> select host,user from mysql.user;

		mysql> show grants for mydba@"%";
       3.7 测试授权 练习15 分钟 到 17：55  
	    	在主机51 上 连接数据库服务器 50
		]# mysql -h192.168.4.50 -umydba -p123456
		mysql> select  user() ;	 //查看连接的用户名和客户端地址	 
		mysql> select  @@hostname; //显示服务器主机名
		mysql> show grants; //显示访问权限

		mysql> 测试对数据的访问权限create drop  select insert

			测试授权权限
		mysql> grant select,insert on db3.user to admin@"localhost"
                       identified by "123456";


          在数据库服务器50本机测试mydba 添加的授权用户admin
	  	]# mysql -hlocalhost -uadmin  -p123456
		mysql>select  user() ;
		mysql> select  @@hostname;
                mysql> show grants;
		mysql> 测试对数据的访问权限 create drop  select insert
		
	  在数据库服务器50上撤销以有授权用户的权限

		mysql50 ~]# mysql -uroot -pabc123
		mysql> select host,user from mysql.user;
		mysql> show grants for mydba@"%";
		mysql> revoke grant option on  *.* from mydba@"%";
		mysql> revoke delete , update on  *.* from  mydba@"%";
		mysql> revoke all on  *.* from  mydba@"%";
		mysql> show grants for mydba@"%";
	 删除授权的用户
		mysql> drop  user mydba@"%";
		mysql> select host,user from mysql.user;

+++++++++++DAB1_DAY04
一、多表查询 多表查询的命令格式
二、恢复数据库管理本机登陆密码 设置数据库管理员本机登陆密码
三、安装phpmyadmin 图形管理工具:  LAMP  安装phpmyadmin
四、用户授权 和 权限撤销： 用户授权的作用？ 用户授权命令的格式？ 数权库mysql 
			   权限用户授权命令格式  删除用户
			   相关命令： select user();  select  @@hostname;
				      show  grants;  
					show grants  for 用户@"客户端地址“；

+++++++DBA1_day05  （数据备份与 数据恢复）

数据备份方式  
	物理备份： 练习10分钟 到 09：47
		50：
		]# mkdir  /mysqlbak
		]# tar -zcvf  /mysqlbak/mysql.tar.gz  /var/lib/mysql/*
		]# scp /mysqlbak/mysql.tar.gz  root@192.168.4.51:/root/
	物理恢复：
		51:
		]# systemctl  stop  mysqld
		]# rm -rf /var/lib/mysql
		]# cd /root
		]# tar -zxvf  mysql.tar.gz
		]# ls  var/lib/mysql
		]# cp -r var/lib/mysql  /var/lib/
		]# ls /var/lib/mysql
		]# chown  -R mysql:mysql  /var/lib/mysql
		]# systemctl  start  mysqld
		]# mysql -uroot -p密码
		mysql> show databases;

	逻辑备份： 使用命令对数据做备份，根据执行备份已有的数据  
		   生成对应的数据文件。

	逻辑恢复： 使用命令调用备份文件，做数据恢复。


数据备份策略：
	 完全备份： 备份所有数据
	 备份新产生的数据：
			差异备份：备份完全备份后，所有新产生的数据。
			增量备份：备份上次备份后，所有新产生的数据。


数据备份方式：逻辑备份
数据备份策略：完全  增量 差异
数据备份频率：根据数据产生的量
数据备份时间：数据库服务器访问量少时，执行数据备份操作
数据备份文件的命名：日期_库名.sql
数据备份文件的存储空间： 把备份文件 存放到存储服务器上，
			 并且存储服务器的空间可以动态扩大（LVM） 
数据备份手段：
		1、crond  +  数据备份脚本
		   59 23 *  *  1  数据完全备份脚本
		2、部署服务，实现数据备份 （mysql主从同步）


生产环境下通常使用的备份策略：
	完全+差异
	完全+增量
	  18：00	t1	文件名   数据量
 1 完全			10	1.sql	 10
 2 差异			5       2.sql	 5
 3			3	3.sql	 8
 4			2	4.sql 	 10
 5			7	5.sql	 17
 6			4	6.sql	 21
 7 差异			10	7.sql	 31


	  18：00	t1	文件名   数据量
 1 完全			10	1.sql	 10
 2 增量			5       2.sql	 5
 3			3	3.sql	 3
 4			2	4.sql 	 2
 5			7	5.sql	 7
 6			4	6.sql	 4
 7 增量			10	7.sql	 10
	 
一、完全备份 
	1.1 使用服务自带的mysqldump命令对数据做完全备份
		mysqldump命令的命令格式：
			]# mysqldump  -uroot -p密码  数据库名 > 备份文件名
	
		例子：
		]# mysqldump  -uroot -pabc123  --all-databases  > /mysqlbak/all.sql
		]# mysqldump  -uroot -pabc123  db1  > /mysqlbak/db1.sql
		]# mysqldump  -uroot -pabc123  db3 user  > /mysqlbak/db3_user.sql
		]# mysqldump  -uroot -pabc123  -B db2 db4  > /mysqlbak/twodb.sql
		]# ls /mysqlbak/*.sql
	
		scp  /mysqlbak/db3_user.sql  root@192.168.4.51:/root/
		scp  /mysqlbak/db1.sql  root@192.168.4.51:/root/
		scp  /mysqlbak/twodb.sql  root@192.168.4.51:/root/

	1.2 使用完全备份文件恢复数据
		命令格式： 
			]# mysql  -uroot -p密码  [ 数据库名 ] <  备份文件名
		例子：
		mysql> use db3;
		mysql> drop  table  user;
		]# mysql -uroot -pabc123  db3  < /root/db3_user.sql
		mysql> select  * from db3.user;

		mysql> drop  database  db2;
		mysql> drop  database  db4;
		]# mysql -uroot  -pabc123   <  /root/twodb.sql

		mysql> drop database db1;
		mysql> create database db1;
		]# mysql -uroot -pabc123  db1   < /root/db1.sql

 	1.3 思考一下： 使用 mysqldump备份有什么缺点 ？
			锁表（加的是写锁）
			完全备份后 ，新产生的数据 无法恢复
			
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
二、实时增量备份/恢复  启用mysql服务的 binlog日志 日志实现
	2.1 binlog日志介绍
		是mysql服务日志文件的一种，又被称为 二进制日志，记录在服务器上执行的
		除查询之外的SQL命令
		查询命令包括哪些： desc  select  show 

	2.2 启用binlog日志  练习10分钟  到 14：38
		]# vim /etc/my.cnf
			[mysqld]
			  server_id=50  //指定服务器的编号
			  log-bin       //启用日志
		:wq
		systemctl restart mysqld
		mysql -uroot -pabc123
		mysql> show master status;  //查看日志文件
		]# cd /var/lib/mysql       //默认存储目录     
		]# ls 
		主机名-bin.000001  //日志文件          
		主机名-bin.index   //索引文件

		自定binlog日志文件的存储目录和日志文件名
		  ]# vim /etc/my.cnf
                        [mysqld]
                          server_id=50
                          #log-bin
			  log-bin=/logdir/plj    //指定日志文件的 目录 和 名称
                  :wq
		]# mkdir  /logdir
		]# chown  mysql  /logidr

 	        ]# systemctl restart mysqld
                ]#mysql -uroot -pabc123
                mysql> show master status;

                ]# ls /logdir/plj*
		
	2.3 手动创建新的binlog日志文件   【 练习 5 分钟 到  14：50 】
		]# systemctl  restart  mysqld

		mysql> flush logs;
		或
		]# mysql  -uroot -pabc123  -e  "flush logs"

		]# mysqldump -uroot -pabc123 --flush-logs  db1  >  /mysqlbak/db1.sql
	
	2.3 删除已有binlog日志文件 
		mysql> purge  master  logs  to  "plj.000005";
		mysql> reset master;

       休息15分钟  到 15：15  

	2.4 查看binlog日志文件内容  练习到 16：00 
		2.4.1 binlog日志格式 (row   statement  mixed )
			mysql> show  variables like  "binlog_format"; //查看日志格式
			]# vim /etc/my.cnf
				[mysqld]
				server_id=50
				#log-bin
				log-bin=/logdir/plj
				binlog_format="mixed"  //指定日志格式
			:wq
			]# systemctl restart  mysqld
			
			mysql> show variables like  "binlog_format";
			mysql> reset master;
			mysql> show  master status;
			mysql> desc db1.t1;
			mysql> insert into db1.t1 values(22);
			mysql> insert into db1.t1 values(33);
			mysql> insert into db1.t1 values(44);
			mysql> insert into db1.t1 values(55);
			mysql> insert into db1.t1 values(66);
		2.4.3 查看binlog日志文件内容
			]# mysqlbinlog 日志文件名
			]# mysqlbinlog /logdir/plj.000001 | grep  -i  insert
			]# mysqlbinlog /logdir/plj.000001

		2.4.2 日志文件如何区分记录的多条sql命令
			偏移量 ： 可以理解为 执行命令的长度
			时间点 ： 命令执行的开始时间 和命令执行后的结束时间
		2.5 使用日志文件恢复数据
			2.5.1 命令格式
			]# mysqlbinlog  选项 日志文件名 | mysql -uroot -p密码				
			2.5.2 例子  (15分钟 到 16：50)
	                50: 
			   ]# scp  /logdir/plj.000001  root@192.168.4.51:/root/
	
			51:
			  ]# mysqlbinlog /root/plj.000001
      
			  //执行日志文件里的所有sql命令
			  ]# mysqlbinlog /root/plj.000001 |  mysql -uroot -pabc123
			  mysql>  select   * from db1.t1;

			  //仅执行指定范围内记录的sql命令
			  ]# mysqlbinlog --start-position=293  --stop-position=958  \
	   		  /root/plj.000001  |  mysql -uroot -pabc123

			  mysql>  select   * from db1.t1;

   总结： 日志的作用  启用日志  手动创建新的日志文件 删除已有的日志文件  
          日志格式 读取日志文件记录的sql命令恢复数据

   休息到 17: 25

三、innobackupex 【安装软件提供备份命令innobackupex 对数据做备份与恢复】
	3.1 软件介绍
	3.2 安装软件
		]# rpm -ivh libev-4.15-1.el6.rf.x86_64.rpm 
    		]# yum -y install percona-xtrabackup-24-2.4.7-1.el7.x86_64.rpm
		
		[root@mysql50 ~]# which innobackupex 
		/usr/bin/innobackupex

		[root@mysql50 ~]# man innobackupex

	3.3 命令格式
		]# innobackupex  <选项>
			
	3.4 数据备份与恢复
	    	准备工作： 把50数据库服务的存储引擎修改为innodb
		       	   删除非innodb存储引擎表所在的库
		           create database db5;
		   	   create table db5.a(id int);
				insert into db5.a values(11),(22),(33);	
				insert into db5.a values(44),(55),(66);	
				insert into db5.a values(77),(88),(99);	
				insert into db5.a values(100),(101),(102);	
	3.4.1 数据完全备份与恢复
	 完全备份
		]# innobackupex  --user root  --password abc123  /allbak --no-timestamp
		]# ls /allbak

	 完全恢复 15分钟 到 10：40

		1 准备恢复数据
		]# cat /allbak/xtrabackup_checkpoints  //查看备份信息
		]# innobackupex --apply-log /allbak    //准备恢复数据
		]# cat /allbak/xtrabackup_checkpoints

		2 把备份目录下的数据拷贝到数据库目录下
		]# systemctl  stop mysqld
		]# rm  -rf /var/lib/mysql/*            
  		]# innobackupex --copy-back /allbak   //恢复数据
		]# ls /var/lib/mysql  -l
		]# chown  -R mysql:mysql  /var/lib/mysql
		]# systemctl  start mysqld
		]# mysql -uroot -pabc123
		mysql> show  databases;
		
	***把50的备份文件 恢复到51 数据库服务器上。（10分钟 到 10：50 ）	
		50: 
		    把备份目录拷贝给51
			]# scp  -r /allbak  root@192.168.4.51:/
		51：
		   安装percona软件包
		   停止mysqld服务并清空数据库目录数据
		   使用innobackupex恢复数据  ]# innobackup --copy-back /allbak
		   修改所有者和组 为mysql
		   启动服务
		   管理员登陆并查看数据

		                         
		3.4.2 数据增量备份与恢复
	周一做完全备份
		]# innobackupex  --user root --password abc123 /fullbak --no-timestamp

		]# cat /fullbak/xtrabackup_checkpoints

		mysql> insert into  db5.a values(9999);(10条记录)
			
	周二做增量备份
		mysql> select  * from db5.a;

		]# innobackupex  --user root --password abc123 --incremental /new1dir  \
                    --incremental-basedir=/fullbak --no-timestamp

		]# cat /new1dir/xtrabackup_checkpoints

		mysql> insert into  db5.a values(88888);(10条记录)		

	周三做增量备份
		mysql> select  * from db5.a;
		
		]# innobackupex --user root  --password abc123 --incremental /new2dir \
		--incremental-basedir=/new1dir  --no-timestamp

		]# cat /new2dir/xtrabackup_checkpoints

			周四做增量备份
			周五做增量备份
			周六做增量备份
			周日做增量备份

	增量恢复 (15分钟 到 14：40 )
		1 恢复数据
		   ]#  systemctl  stop  mysqld
		   ]#  rm  -rf /var/lib/mysql/*
		   ]# cat /fullbak/xtrabackup_checkpoints
		   ]# innobackupex  --apply-log --redo-only  /fullbak
		   ]# innobackupex  --apply-log --redo-only  /fullbak  --incremental-dir=/new1dir		
		   ]# innobackupex  --apply-log --redo-only  /fullbak  --incremental-dir=/new2dir

		   ]# cat /fullbak/xtrabackup_checkpoints  //三次备份，日志的总范围
                   //增量备份的数据都已经拷贝到/fullbak目录下了 所以可以删除增量目录了
                   ]# rm  -rf  /new1dir
		   ]# rm  -rf  /new2dir
		2 把备份文件拷贝到数据库目录下
		]#  innobackupex  --copy-back  /fullbak/
  		]#  ls /var/lib/mysql
		3 修改数据库目录的所有者和组用户为mysql
  		    ]#   chown  -R mysql:mysql  /var/lib/mysql
		4 启动服务
  		     ]#  systemctl  start mysqld
		5 管理员登陆查看数据
  		  ]#  mysql -uroot -pabc123
	  *******让51数据库服务器 和当前50的主机数据一样。
			50： 把备份文件拷贝给主机51
			    ]# scp  -r /fullbak   root@192.168.4.51:/
		        51：
			    	]# systemctl  stop mysqld
  				]#  rm -rf /var/lib/mysql/*
  				]#  innobackupex  --copy-back /fullbak/
  				]#  chown  -R mysql:mysql /var/lib/mysql
  				]#  systemctl  start mysqld
  				]#  mysql -uroot -pabc123
				mysql> select  * from db5.a;

		3.4.3 从完全备份文件里恢复单个表的数据
		在db5库里创建新表b  并插入记录
			create table  db5.b(name char(10));
			insert into db5.b values("bob");(写5条)
			insert into db5.b values("tom");(写5条)
			select  * from b;
		完全备份
		]# innobackupex --user root --password abc123 --databases="db5" /db5bak \
         	   --no-timestamp

		删除表	
		 mysql> use db5;
		 mysql> show  tables;
		 mysql> drop table b;
		 mysql> show  tables;

               恢复单个表 练习15分钟 到 16：05            休息到 16：20 
        		1 创建删除表（表结构与原来的一样）
				mysql> create table  db5.b(name char(10));
				mysql> system ls /var/lib/mysql/db5/b.*				
			2 删除表空间
				mysql> alter  table db5.b  discard  tablespace; 
				mysql> system ls /var/lib/mysql/db5/b.*

			3 在备份数据里导出表信息
 			]# innobackupex --user root --password abc123   \
			   --apply-log --export /db5bak

			4 把导出的信息文件拷贝到数据库目录下
			mysql> system  cp  /db5bak/db5/b.{exp,cfg,ibd} /var/lib/mysql/db5/
				
			5 修改所有者和组用户为mysql
			mysql> system chown  mysql:mysql  /var/lib/mysql/db5/b.*

			6 导入表信息
			  mysql> alter  table  db5.b  import  tablespace;
                    	  mysql> system rm -rf /var/lib/mysql/db5/b.exp
                    	  mysql> system rm -rf /var/lib/mysql/db5/b.cfg

			7 查看数据
			mysql> select  * from db5.b;

+++++++DBA1_day05 知识点总结：
1 数据备份方式
2 数据备份策略
3 备份数据要考虑到那些问题
4 生产环境使用备份策略 
5 使用mysqldump命令对数据做完全备份 （ 备份 恢复 缺点）
6 启用mysql服务的binlog日志文件实现数据时时增量备份
	6.1 日志的使用  6.2 使用日志恢复数据

7 安装percona软件,提供备份命令innobackupex 对数据做备份与恢复
 7.1 数据完全与恢复
 7.2 数据增量与恢复
 7.2 恢复单个表的所有数据	

+++++DBA2_DAY01+++++ 部署MYSQL主从同步

 一、MySQL 主从同步
	2.1 主从同步介绍  
	2.2 主从同步原理: IO线程 SQL线程
	2.3 配置同步
		2.3.1 配置主库
			]# vim /etc/my.cnf   //启用binlog日志
				[mysqld]
					server_id=51
					log-bin=master51
			:wq

			]# systemctl  restart mysqld
			]# ls /var/lib/mysql/master51.*

			]# mysql -uroot  -p密码    //用户授权
			mysql> grant  replication slave on *.*  to
    			       repluser@"%" identified by "123qqq...A";

			mysql> show master status;  //查看日志信息

		2.3.2 配置从库
			]# vim /etc/my.cnf  //定义server_id   
                                [mysqld]
                                        server_id=52
                        :wq
			]# systemctl restart mysqld

			]# mysql -uroot -p密码
			mysql> change master to   //指定主库信息
    				-> master_host="192.168.4.51",   //ip
    				-> master_user="repluser",	 //用户名
    				-> master_password="123qqq...A", //密码
    				-> master_log_file="master51.000001", //binlog文件
    				-> master_log_pos=441;	//偏移量

			mysql> start slave;  //启动slave程序

			mysql> show slave status\G;        //查看状态信息
				Master_Host: 192.168.4.51  //主库ip
				Slave_IO_Running: Yes      //IO线程
            			Slave_SQL_Running: Yes     //SQL线程
		
		与从库相关的文件
			cd /var/lib/mysql/
			master.info
			mysql52-relay-bin.000001
			mysql52-relay-bin.index
			relay-log.info

		配置失败的解决办法：

			
			1 查看报错信息，根据报错信息排错
			 mysql> show slave status\G;
			             Last_IO_Error:  IO线程的报错信息
				     Last_SQL_Error: SQL线程的报错信息
			 mysql> stop slave;
			 mysql> change master to  选项=值；
			 mysql>	start slave;
			 mysql> show slave status\G;
				


		  	2 把52恢复独立数据库服务器 重新指定主库信息
				70  systemctl  stop mysqld
  				371  cd /var/lib/mysql
  				372  rm -rf master.info  relay-log.info 
  				373  rm -rf mysql52-relay-bin.*
  				374  systemctl  start mysqld
				376  mysql -uroot -p123qqq...A
				     mysq> show slave status;

		 	3 在客户端测试主从同步配置
			  3.1 在主库授权访问数据的连接用户
				]# mysql -uroot -p密码
				mysql> create database db7;
				mysql> create table  db7.t1 (id int);
				mysql> grant select,insert on db7.* to 
					yaya@"%" identified by "123qqq...A";
			  
			  3.2 在客户端使用授权用户连接主库 
				mysql50 ~]# mysql -h192.168.4.51 -uyaya -p123qqq...A
				mysql> insert into db7.t1 values(88),(99);
				mysql> select  * from db7.t1;
			  3.3 在客户端使用授权用户连接从库也可以看到和主库一样数据
				mysql50 ~]# mysql -h192.168.4.52 -uyaya -p123qqq...A
				mysql> select  * from db7.t1;

	2.4 主从同步结构模式
		2.4.1 主从同步结构模式 
			一主一从 ***
			一主多从 ***
			主从从
			主主结构（互为主从）

		2.4.2 配置一主多从结构 把服务器53 也配置为51 的从库服务器
		      53：
			 1  与主库数据一致
			 2  指定server_id
			 3  管理员登陆指定主库信息
			 4  查看IO和SQL状态
			  v  5  测试配置			
	                 
	   	2.4.3 配置主从从结构 把主机54 配置为从库53的从数据库服务器
				    主  从   从
				    51  53   54
		     53：设置主库配置
			 	启用binlog日志 和 级连复制功能
						  log_slave_updates

				用户授权
				查看binlog日志信息

		     54：做从库配置
				与主库数据一致
				指定server_id
				管理员登陆指定主库信息
	                        查看IO和SQL状态

        	     50: 测试主从从配置
			 50主机连接主库51 插入新记录 
			 在从库 53 和 54 本机都可以查看的一样的记录
	                 休息15分钟 到 11：15   练习45 分钟 到 12:00

	       2.4.4 配置主主结构  55  < ----> 56  练习20分钟 到  14：45 
			 55主机
		     		启用主库配置 
					启用binlog日志
					vim /etc/my.cnf
						[mysqld]
						server_id=55
						log-bin=master55
					:wq
					systemctl restart mysqld
					ls /var/lib/mysql/master55.*

					用户授权
					]# mysql -uroot -p密码
					mysql> grant replication slave on  *.*
					to  repluser@"%" identified by  "123qqq...A";

					查看日志信息
					mysql> show master status;

			56主机
				启用主库配置
                                        启用binlog日志
					vim /etc/my.cnf
                                                [mysqld]
                                                server_id=56
                                                log-bin=master56
                                        :wq
                                        systemctl restart mysqld
                                        ls /var/lib/mysql/master56.*

                                        用户授权
					]# mysql -uroot -p密码
                                        mysql> grant replication slave on  *.*
                                        to  repluser@"%" identified by  "123qqq...A";						
                                        查看日志信息
					mysql> show  master status;

		       把55主机指定为56主机的从库
					数据库员本机登陆指定主库信息
					]#mysql -uroot -p密码
                                        mysql> show slave status;
                                        mysql> change master to
                                               master_host="192.168.4.56",
                                                master_user="repluser",
                                                master_password="123qqq...A";
                                                master_log_file="master56.000001";
                                                master_log_pos=偏移量;
                                        mysql>  start slave;
					查看从库状态信息
					mysql> show  master status;

		       把56主机指定为55主机的从库
					数据库员本机登陆指定主库信息
					]#mysql -uroot -p密码
					mysql> show slave status;
					mysql> change master to 
					       master_host="192.168.4.55",
						master_user="repluser",
						master_password="123qqq...A";
						master_log_file="master55.000001";
						master_log_pos=偏移量;
					mysql>  start slave;
			
					查看从库状态信息
		       			mysql> show slave status\G;

                       在客户端测试主主配置
					在数据库服务器添加访问数据数据的连接用户	
					55：
					]# mysql -uroot -p密码
					mysql> create database gamedb;
					mysql> create  table  gamedb.stu(name char(10));
					mysql> grant select ,insert on gamedb.* 
						to  admin@"%" identified by "123qqq...A";

					56:
					]# mysql -uroot -p密码
					mysql> show databases;
					mysql> use gamedb;
					mysql> show tables;
					mysql> select host,user from mysql.user 
						where user="admin";
					mysql> show grants for admin@"%";
	
					50:分别可以插入数据和看到数据
					]#mysql -h192.168.4.55 -uadmin -p123qqq...A
					mysql> insert into gamedb.stu values("bob");
					mysql> exit;
					]#mysql -h192.168.4.56 -uadmin -p123qqq...A
					mysql> select  * from  gamedb.stu;
					mysql> insert into gamedb.stu values("tom");
					mysql> exit;
                                        ]#mysql -h192.168.4.55 -uadmin -p123qqq...A
					mysql> select  * from  gamedb.stu;

	15:05 讲新课
       2.5 主从同步常用配置参数  10 分钟 到 15：45

		]# vim /etc/my.cnf
		   [mysqld]
		     选项=值
		  ：wq
		]# systemctl restart mysqld

		2.5.1 主服务器配置参数(对所有从库有效)
			
			binlog_do_db=db8,db9   仅允许同步的库名列表
			binlog_ignore_db=db7,db6,db5  不允许同步的库名列表

			mysql> show master status;
			       
		2.5.2 从服务器配置参数（仅对从库本机自身有效）
			log_slave_updates 允许级连复制
			replicate_do_db=db8,db9 仅同步的库名列表
			replicate_ignore_db=db7,db4  不同步的库名列表

			mysql> show slave status\G;
				 Replicate_Do_DB:  仅同步的库名列表
          			 Replicate_Ignore_DB: 不同步的库名列表
	
	休息15分钟  到  16：00
			
 二、MySQL主从同步复制模式
		2.1 异步复制模式 
		2.2 全同步复制模式
		2.3 半同步复制模式
		2.4 配置半同步复制模式
		    2.4.1  把 主库51 设置为半同步复制模式
			查看是否允许动态加载模块（默认允许）
			    mysql> show  variables  like  "have_dynamic_loading"; 
			
			查看模块是否被加载 （默认没有加载）
			SELECT  PLUGIN_NAME, PLUGIN_STATUS 
                        FROM INFORMATION_SCHEMA.PLUGINS  
                        WHERE PLUGIN_NAME LIKE '%semi%'; 

			加载半同步复制模块 （模块名semisync_master.so）
			mysql>  INSTALL PLUGIN rpl_semi_sync_master   
                                SONAME   "semisync_master.so";  			

			查看是否启用半同步复制模式（默认没有启用）
			mysql> show  variables  like  "rpl_semi_sync_%_enabled";
		
			启用模块 把变量rpl_semi_sync_master_enabled的值设置为1
			mysql>  SET GLOBAL rpl_semi_sync_master_enabled = 1;
			mysql> show  variables  like  "rpl_semi_sync_%_enabled";
		   	以上是命令行设在重启服务会失效
			修改主配置文件使其永久有效
			]# vim /etc/my.cnf
			[mysqld]
			plugin-load=rpl_semi_sync_master=semisync_master.so //加载模块
			rpl_semi_sync_master_enabled=1  //启用半同步复制模式
			:wq
                        ]# systemctl restart  mysqld
		        ]# mysql  -uroot -pabc123
			mysql> SELECT  PLUGIN_NAME, PLUGIN_STATUS FROM INFORMATION_SCHEMA.PLUGINS  WHERE PLUGIN_NAME LIKE '%semi%';

			mysql> show  variables  like  "rpl_semi_sync_%_enabled";


		2.4.2  把 从库52 设置为半同步复制模式  (休息到 17：10 )
			练习 10 分钟  到 17：20 

			加载模块
			   INSTALL PLUGIN rpl_semi_sync_slave  SONAME  'semisync_slave.so’; 
			启用模块
			      mysql> SET GLOBAL rpl_semi_sync_slave_enabled = 1;
			查看
			      mysql> show  variables  like  "rpl_semi_sync_%_enabled";

			修改主配置文件使其永久有效
			   ]# vim /etc/my.cnf
                              [mysqld]
                              plugin-load=rpl_semi_sync_slave=semisync_slave.so //加载模块
                              rpl_semi_sync_slave_enabled=1  //启用半同步复制模式
                           :wq
                        ]# systemctl restart  mysqld
                        ]# mysql  -uroot -pabc123
                        mysql> SELECT  PLUGIN_NAME, PLUGIN_STATUS FROM INFORMATION_SCHEMA.PLUGINS  WHERE PLUGIN_NAME LIKE '%semi%';

                        mysql> show  variables  like  "rpl_semi_sync_%_enabled";

+++++DAB2_DAY02
一、MySQL数据读写分离
	2.1 MySQL数据读写分离介绍：
		把客户端访问时的查询和存储数据的请求分别给不同的数据库服务器处理

		读 select 		  ----> slave  从数据库服务器

		写 insert delete  update  ----> master 主数据库服务器

	2.2 为什么要配置数据读写分离

	2.3 配置数据读写分离
		2.3.1 拓扑结构
				client50
				    |
 				    |
       			       maxscale57
				    |
				    |
			———————————————————————
			  |                |
                      select		  insert 
			52从		    51主

		2.3.2 配置mysql 主从同步结构 （一主(51) 一从(52)）


		2.3.3 配置数据读写分离服务器57
			mysql中间件  maxscale  mysql-proxy  mycat 

			1 安装提供服务的软件
				]# rpm -ivh  maxscale-2.1.2-1.rhel.7.x86_64.rpm
				]# ls /etc/maxscale.cnf
				[root@maxscale57 ~]# max (按2次tab键)
			maxadmin        maxbinlogcheck  maxpasswd       
			maxavrocheck    maxkeys         maxscale 

			2 修改主配置文件
				]# cp /etc/maxscale.cnf /root/
				]# vim /etc/maxscale.cnf
	
					9 [maxscale]   服务线程数量
 					10 threads=auto

					18 [server1]   定义数据库服务器ip地址
 					19 type=server
 					20 address=192.168.4.51  主库ip
 					21 port=3306
 					22 protocol=MySQLBackend
 					23 
 					24 [server2]   定义数据库服务器ip地址
 					25 type=server
 					26 address=192.168.4.52   从库IP
 					27 port=3306
 					28 protocol=MySQLBackend

					36 [MySQL Monitor] //定义监视的数据库服务器
 					37 type=monitor
 					38 module=mysqlmon
 					39 servers=server1,server2  //主库和从库
 					40 user=maxmon  //监控用户 
 					41 passwd=123qqq...A  //密码
 					42 monitor_interval=10000

					53 #[Read-Only Service] 不定义只读服务
 					54 #type=service
 					55 #router=readconnroute
 					56 #servers=server1
 					57 #user=myuser
 					58 #passwd=mypwd
 					59 #router_options=slave

 					64 [Read-Write Service] //定义读写服务
 					65 type=service
 					66 router=readwritesplit
 					67 servers=server1,server2  //主库和从库
 					68 user=scaluser   //路由用户
 					69 passwd=123qqq...A   //密码
 					70 max_slave_connections=100%
					
 					76 [MaxAdmin Service] //定义管理服务
 					77 type=service
 					78 router=cli


 					86 #[Read-Only Listener] //不定义只读服务端口
 					87 #type=listener
 					88 #service=Read-Only Service
 					89 #protocol=MySQLClient
 					90 #port=4008

 					92 [Read-Write Listener] //定义读写分离服务端口
 					93 type=listener
 					94 service=Read-Write Service
 					95 protocol=MySQLClient
 					96 port=4006   //端口号


 					98 [MaxAdmin Listener] //定义管理服务端口
 					99 type=listener
					100 service=MaxAdmin Service
					101 protocol=maxscaled
					102 socket=default
					103 port=4016  //端口号
					:wq
			3 根据配置文件的定义 在2台数据库服务器上创建对应的用户
				在主库51授权 在从库52 查看   10分钟到10：30		        
				3.1 监控用户
				mysql> grant replication slave, replication client on *.* 
				to maxmon@"%"  identified by  "123qqq...A"; 

				3.2 路由用户
				mysql>  grant select on mysql.* 
					to scaluser@"%" identified by "123qqq...A";   

				3.查看授权用户
				 select host,user 
                                 from mysql.user where user in ("maxmon","scaluser");
				
				4 在57主机测试授权
			          ]# mysql -h192.168.4.51 -uscaluser -p123qqq...A
			          ]# mysql -h192.168.4.52 -uscaluser -p123qqq...A
			          ]# mysql -h192.168.4.51 -umaxmon -p123qqq...A
			          ]# mysql -h192.168.4.52 -umaxmon -p123qqq...A

			4 启动服务
				]# maxscale  -f /etc/maxscale.cnf

			5 查看服务信息
				~]# ps -C maxscale
				~]# netstat -utnlp  | grep  maxscale

				~]# killall  -9 maxscale  //停止服务命令

			郑州中心 停电了  等到 10：50 

			6 在57本机访问管理服务查看监控信息
				]# maxadmin -P4016 -uadmin -pmariadb 
				MaxScale> list servers
				Servers.
-------------------+-----------------+-------+-------------+--------------------
Server             | Address         | Port  | Connections | Status              
-------------------+-----------------+-------+-------------+--------------------
server1            | 192.168.4.51    |  3306 |           0 | Master, Running
server2            | 192.168.4.52    |  3306 |           0 | Slave, Running
-------------------+-----------------+-------+-------------+--------------------

MaxScale> exit


		2.3.4 在客户端50 测试数据读写分离服务配置
			2.3.4.1 在主库51 创建访问数据的用户并在从库查看
			mysql> create database db8;
			mysql> create table db8.a(id int);
			mysql> grant select , insert  on db8.* to  jim@"%" identified by "123qqq...A";

			休息10分钟 到 11：20  练习15分钟 到 11：35

			2.3.4.2  50客户端连接服务器57 查询数据和插入数据
				访问读写服务器能插入记录和查询记录
				]# mysql -P4006 -h192.168.4.57 -ujim -p123qqq..A
				   mysql> insert into db8.a values(66);
				   mysql> select  * from db8.a;

			         验证是否实现了数据的读写分离
			           在从库本机 插入记录 insert into db8.a values(52)
				   查询时显示的记录能看到从主机插入的记录					            

二、MySQL多实例 (192.168.4.50)
	2.1 MySQL多实例 介绍
	2.2 配置MySQL多实例
		安装软件
			]# systemctl  stop mysqld
			]# systemctl  disable mysqld
			]# tar -zxvf mysql-5.7.20-linux-glibc2.12-x86_64.tar.gz
			]# mv mysql-5.7.20-linux-glibc2.12-x86_64 /usr/local/mysql
			]# ls /usr/local/mysql/

		创建配置文件定义多实例服务
			]# mv /etc/my.cnf  /root/
                	]# vim /etc/my.cnf		
				[mysqld_multi] // 指定多实例程序
			   
				[实例编号]   //定义多实例服务
					数据库目录
					端口号
					日志文件
					pid号文件
					socket文件
			:wq

			]# vim /etc/my.cnf    练习15分钟到  14：36
			[mysqld_multi]
			mysqld=/usr/local/mysql/bin/mysqld_safe
			mysqladmin=/usr/local/mysql/bin/mysqladmin
			user=root

			[mysqld1]
			datadir=/dir1
			port=3307
			log-error=/dir1/mysql3307.err
			pid-file=/dir1/mysql3307.pid
			socket=/dir1/mysql3307.sock

			[mysqld2]
			datadir=/dir2
			port=3308
			log-error=/dir2/mysql3308.err
			pid-file=/dir2/mysql3308.pid
			socket=/dir2/mysql3308.sock
			:wq

			[root@mysql50 ~]# mkdir /dir1
			[root@mysql50 ~]# mkdir /dir2

	2.3 使用MySQL多实例
			启动服务编号是1 的实例服务
				]# /usr/local/mysql/bin/mysqld_multi start 1
			查看服务信息
				]# ls /dir1
				]# netstat  -utnlp  | grep  :3307
			访问服务
	]# /usr/local/mysql/bin/mysql -uroot -p'k4R+MAfMUgar' -S /dir1/mysql3307.sock
	mysql> alter user  root@"localhost" identified by  "123456";
        mysql> show databases;
	mysql> exit
			存储数据
	]# /usr/local/mysql/bin/mysql -uroot -p123456 -S /dir1/mysql3307.sock
	mysql> create database bbsdb;
	mysql> create table bbsdb.a(id int);
	mysql> insert into bbsdb.a values(110);
	mysql> select  * from  bbsdb.a;
	mysql> exit;
			停止服务
	]# /usr/local/mysql/bin/mysqld_multi --user=root --password=123456 stop 1

			设置服务运行参数 
			]# vim /etc/my.cnf
			[mysqld1]
			   server_id=1    
			   log-bin=plj   
			:wq
			]# /usr/local/mysql/bin/mysqld_multi  \
			   --user=root --password=123456 stop 1

			]# /usr/local/mysql/bin/mysqld_multi start 1
			]# netstat -utnlp  | grep  :3307

			]# ls /dir1/plj*
	
			]# /usr/local/mysql/bin/mysql -uroot -p123456 \
			   -S /dir1/mysql3307.sock						
			mysql> show master status;

			
			授权要求：允许客户端使用admin用户
				  连接50主机，把数据存储在实例2服务的db8库下的a表里
			
			   1 运行50主机的实例2服务
			   2 管理员 登陆 添加授权用户
			       grant all on  db8.*  to  admin@"%" identified by "123456";
			
			   3 客户端连接50数据库服务器
				]#mysql -h192.168.4.50 -P3308 -uadmin -p123456
				mysql> show databases;
				mysql> show grants;
				mysql> create database db8;
				mysql> create table db8.a(id int); 
				mysql> insert into db8.a values(111);
				mysql> select * from db8.a;
			   4 在50服务本机实例2服务的数据库目录/dir2下可以看到库对应的目录
				]# ls /dir2/db8
 	休息到 16：10  

三、MySQL性能调优  DBA2_DAY05 上午讲


+++++DAB2_DAY03	 部署部署MHA集群(mysql高可用集群 5台数据库服务器)
一集群环境准备
	拓扑结构 client 50  ]#systemctl stop mysqld
		 管理主机56 ]#systemctl stop mysqld

		 数据库服务器51到55  ]#systemctl start mysqld
 		  恢复为独立的数据库服务器
                  删除所有定义授权用户
		  删除所有定义库 ，只保留初始的4个库

       ssh无密码登陆配置：
		  配置所有数据库服务器之间可以彼此root用户免密登陆
		  管理主机56 可以免密登陆所有数据库服务器

      安装依赖软件 ： 在所有主机 51～56 都安装
		      ]# yum -y  install perl-*

      
      拷贝软件        mha.tar.gz  到所有主机 51～56  
	          
      部署mysql一主多从 主从同步结构：要求如下
		主库  192.168.4.51   启用binlog日志  用户授权  启用主从2种角色的半同步复制 
	        从库  52 （备用主库）启用binlog日志  用户授权  启用主从2种角色的半同步复制
		从库  53 （备用主库）启用binlog日志  用户授权  启用主从2种角色的半同步复制
                从库  54  （纯从库 ）指定server_id  指定主库信息 启用从角色的半同步复制 
		从库  55  （纯从库） 指定server_id  指定主库信息 启用从角色的半同步复制
	
      10:00 讲新课

二、配置集群
	2.1 MHA软件介绍 
	2.2 配置集群
		1 在所有主机( 51-56 )上安装依赖软件包 10:40
			]# tar -zxvf mha.tar.gz 
  			]# cd mha-soft-student
  			]# yum -y  install perl-*.rpm


		2 配置数据库服务器
			2.1 授权监控用户给56主机使用
			  mysql> grant all on  *.*  to  root@"%" 
				 identified by "123qqq...A";
			  mysql> select host,user from mysql.user 
			       where user="root" and host="%";

			2.2 安装mha_node软件包(51-55)
				]# rpm -ivh mha4mysql-node-0.56-0.el6.noarch.rpm 

			2.3 数据库服务器(51-55)不自动删除本机中继日志文件
				]# vim /etc/my.cnf
				[mysqld]
				 relay_log_purge=off
				:wq
			  	mysql> set global relay_log_purge=off;
		
		3 配置管理主机56
			安装提供管理服务的软件包
				]# rpm -ivh mha4mysql-node-0.56-0.el6.noarch.rpm
				]# tar -zxvf mha4mysql-manager-0.56.tar.gz 
   				]# cd mha4mysql-manager-0.56/
   				]# perl Makefile.PL
   				]# make
   				]# make install
				]# masterha (按2次tab键 会显示所有命令)

		        创建服务的主配置文件并编辑文件
				]# mkdir /etc/mha_manager/
		]# cp mha4mysql-manager-0.56/samples/conf/app1.cnf  /etc/mha_manager/
		]# vim /etc/mha_manager/app1.cnf
		   [server default]
			manager_workdir=/etc/mha_manager
			manager_log=/etc/mha_manager/manager.log
			master_ip_failover_script=/usr/local/bin/master_ip_failover

			ssh_user=root
			ssh_port=22

			repl_user=repluser
			repl_password=123qqq...A

			user=root
			password=123qqq...A

		   [server1]
			hostname=192.168.4.51
			candidate_master=1

		   [server2]
			hostname=192.168.4.52
			candidate_master=1

		   [server3]
			hostname=192.168.4.53
			candidate_master=1

		   [server4]
			hostname=192.168.4.54
			no_master=1

		   [server5]
			hostname=192.168.4.55
			no_master=1
		:wq		

		根据配置文件设置，创建故障切换脚本 /usr/local/bin/master_ip_failover
			]# cd mha-soft-student
			]# cp master_ip_failover /usr/local/bin/
			]# chmod  +x /usr/local/bin/master_ip_failover
			]# vim  /usr/local/bin/master_ip_failover
			 35 my $vip = '192.168.4.100/24';  # Virtual IP 
 			 36 my $key = "1";
 			 37 my $ssh_start_vip = "/sbin/ifconfig eth0:$key $vip";
                         38 my $ssh_stop_vip = "/sbin/ifconfig eth0:$key down";
			:wq
		把vip 192.168.4.100 配置当前主数据库服务器192.168.4.51
			]# ifconfig eth0:1  192.168.4.100
			]# ifconfig eth0:1

		56主机检测配置文件的配置
			]# masterha_check_ssh --conf=/etc/mha_manager/app1.cnf
			   All SSH connection tests passed successfully.
	
			]# masterha_check_repl --conf=/etc/mha_manager/app1.cnf
			   MySQL Replication Health is OK.
			
			56主机启动服务
			]#masterha_manager --conf=/etc/mha_manager/app1.cnf \
			 --remove_dead_master_conf  --ignore_last_failover
				
			56主机 查看服务状态
			]# masterha_check_status --conf=/etc/mha_manager/app1.cnf
			app1 (pid:32610) is running(0:PING_OK), master:192.168.4.51

	     4 测试集群配置
			在主库51 主机，授权客户端访问数据的连接用户
			  mysql> create database bbsdb;
			  mysql> create table bbsdb.t1(id int);
			  mysql> grant select,insert  on  bbsdb.*  
				to yaya@"%" identified by "123qqq...A";

			4.1 客户端50 访问vip 连接数据库服务，存取数据
			   ]# mysql  -h192.168.4.100  -uyaya  -p123qqq...A  bbsdb
			   mysql> insert into  bbsdb.t1 values(119),(120),(110);
			    
                           在所有数据库服务器上都能查看到数据
			   mysql> select  * from bbsdb.t1;

			4.2 测试高可用：
			   当主库51宕机后（systemctl stop mysqld），
			   客户端依然可以访问vip 连接数据库服务，存取数据。

			休息到 16：25
			如何：把坏掉的服务器51 添加到集群里
			51:
			   运行数据库服务器
			   配置为当前主库的从服务器
				mysql> change master to master_host="192.168.4.52",master_user="repluser",master_password="123qqq...A",master_log_file="master52.000001",master_log_pos=919;
Query OK, 0 rows affected, 2 warnings (0.31 sec)

mysql> start slave;
Query OK, 0 rows affected (0.07 sec)

mysql> show slave status\G;		
			56：
			   在app1.cnf文件里添加 主机51
			    ]# vim /etc/mha_manager/app1.cnf
				[server1]
				candidate_master=1
				hostname=192.168.4.51
			   :wq
			   ]# masterha_check_ssh --conf=/etc/mha_manager/app1.cnf
  			   ]# masterha_check_repl --conf=/etc/mha_manager/app1.cnf

			   启动管理服务
			    ]# masterha_manager --conf=/etc/mha_manager/app1.cnf \
				--remove_dead_master_conf  --ignore_last_failover
			   
			   查看服务状态
		[root@mgm56 ~]# masterha_check_status  --conf=/etc/mha_manager/app1.cnf
                   app1 (pid:1838) is running(0:PING_OK), master:192.168.4.52
			
+++++++++DBA2_DAY04
一、MySQL视图
二、MySQL存储过程


视图和存储过程都是对 表记录 做处理的。
准备学习环境： 15 分钟 到 09：26 
运行192.168.4.50的mysqld服务
把/etc/passwd文件的内容存储到db9库下的user表里
添加新字段id 存储记录的行号(在所有字段的前边)

mysql> create database db9;
mysql> create  table db9.user(
    -> name char(30),
    -> password  char(1),
    -> uid int,
    -> gid int,
    -> comment char(150),
    -> homedir char(150),
    -> shell char(50)
    -> );
mysql> system cp /etc/passwd  /mydatadir/
mysql> system ls /mydatadir/passwd
mysql> load  data  infile  "/mydatadir/passwd" into  table db9.user
    -> fields terminated by ":" lines  terminated by "\n";

mysql> alter table  db9.user add 
    -> id int  primary key auto_increment first;
mysql> select  * from db9.user;

一、MySQL视图
	2.1 什么视图？
	2.2 视图优点？
	2.3 视图基本使用
		2.3.1 命令格式
		2.3.2 例子
	              创建视图  使用视图  查看视图  删除视图

	2.4 视图进阶 15练习 到 14：50
		2.4.1  or replace 覆盖创建视图

		mysql> create view v1 as  select name,uid from user;
	mysql> create view v1 as  select name,uid,gid from user; 报错
		mysql> create or replace  view v1 
                       as  select name,uid,gid from user;
		
		2.4.2  ALGORITHM   指定视图算法
		mysql> create ALGORITHM=TEMPTABLE  view v2 
                       as  select name,uid from user;

                mysql> show create view v2\G;
		
		2.4.4  with check option 限制对视图表 数据的操作

		mysql> create table user2   创建新表user2
                       select name,uid,shell,homedir from user 
                       where uid>=100 and uid<=1000;
		mysql> show tables;
		mysql> select  * from user2;
		mysql> create view v1 as  
                       select * from user2 
                       where uid >=10 and uid<=500 
                       with local check option;
		mysql> update v1 set uid=9 where name="arbt";报错
		mysql> update v1 set uid=501 where name="arbt";报错
		mysql> update v1 set uid=99 where name="arbt";正确
		mysql> create view v2 as 
                       select * from  v1 where uid>=100 
                       with CASCADED check option;
		mysql> update v2 set uid=99 where name="qemu";报错
		mysql> update v2 set uid=1001 where name="qemu";报错
		mysql> update v2 set uid=101 where name="qemu";正确
          
         休息到 15：15
		
		2.4.3  给字段和表定义别名
			mysql> create view v3(aname,bname) as select user.name,user2.name from user,user2 where user.uid = user2.uid;

			mysql> create view v4 as select user.name as aname , user2.name as bname from user,user2 where user.uid = user2.uid;

			mysql> create view v5(aname,wname) as
    -> select b.name, c.name from
    -> studentinfo b left join user2 c
    -> on
    -> b.name = c.name;

			mysql> show tables;

二、MySQL存储过程
	2.1 MySQL存储过程介绍？
	2.2 存储过程优点
	2.3 存储过程基本使用
		2.3.1	创建存储过程
			delimiter  //
			create procedure db9.p1()
			begin
				select * from db9.user where id<=10;
			end
			//
			delimiter ;

		2.3.2	执行存储过程
			call  p1();
			call  p1();			
			call  p1();

		2.3.3   查看存储过程
			2.3.4.1 查看数据库服务已有存储过程
			    select db,name,type from mysql.proc 
			    where type="procedure"\G;

			    select db,name,type from mysql.proc
                            where type="procedure" and name="p1"\G; 

			2.3.4.2 查看存储过程的具体代码
			select db,name,type,body from mysql.proc
                        where type="procedure" and  name="p1"\G;

		2.3.4	删除存储过程
			drop procedure db9.p1;
	     
			select db,name,type from mysql.proc
                        where type="procedure" and name="p1"\G; 查不到了

			call p1(); 报错


      2.4 存储过程进阶
		2.4.1  变量（类型 定义 调用）
		自定义变量 set
		mysql> set @age=9;

		mysql> set @name="bob";

		mysql> select  @age ;

		mysql> select  @name;

		mysql> select @age , @name;

		mysql> set @x=9 , @y=8;

		mysql> select  @x , @y;

		mysql> select name into @username  from 
                       db9.user where name="root";

		mysql> select  @username;

		局部变量 declare
			delimiter  //
			create procedure  p2()
			begin
				declare  x int ;
				declare  y int ;
				declare  name char(10);
				
				set x=9;
				set y=11;
				set name="bob";
				
				select x , y , name ;
			end
			//
			delimiter ;

			delimiter  //
			create procedure  p3()
			begin
				declare  x int;
				select count(name) into x from db9.user;
				select x;
			end	
			//
			delimiter ;

			call  p3();

		全局变量
			mysql> show global variables;
			mysql> show global variables like "%ver%";
			mysql> show global variables like "%name%";
			mysql> select  @@hostname;
			mysql> select @@version , @@version_comment;
			mysql> set  global 变量名=值；
			
		会话变量
			mysql> show session variables;
			mysql> show session variables like "%size%";
			mysql> set session sort_buffer_size = 40000; 
			mysql> show session variables 
                               like "sort_buffer_size";

		2.4.3  算数运算 （+  -  *  /   %）
				 加 减 乘 除  求模
			mysql> set  @z = 9  + 1;

			mysql> select  @z;

			mysql> set @x =  7;
			mysql> set @y =  8;
			mysql> set @k = @x  * @y;

			mysql> select  @k;

			mysql> set @i = 1  -  @z;

			mysql> select  @i;
			delimiter  //
			create procedure  db9.p4()
			begin
				declare x int;
				declare y int;
				declare z int;
		select count(name) into x from  db9.user where shell="/bin/bash";
		select count(name) into y from  db9.user where shell="/sbin/nologin";
				set z = x + y;
				select x, y , z;
			end
			//
			delimiter ;

			call  db9.p4();

		2.4.2  存储过程参数类型 （输入类型 输出类型 输入输出类型）
			    输入类型： in      (10分钟到43)
				
				delimiter  //
				create procedure db9.say1(in username char(10))
				begin
				  select * from  db9.user where name=username;
				end
				//
				delimiter ;
				call say1(); 报错，要求必须有参数
 				call  say1("bob");
 				call  say1("root");

			   输出类型: out   （10分钟到  10：05）
									
				delimiter  //
				create procedure say2(out x int)
				begin
         select count(name) into x from  db9.user where shell!="/bin/bash";
         select x;
	 			end
				//
				delimiter ;

				call  say2(); 没给参数 报错
				select @z;   
				call  say2(@z); 用自定义变量@z 保存输出结果
				select  @z;

			输入/输出参数： inout
				delimiter  //
				create procedure say3(inout x int)
				begin
				 select  * from  db9.user where id<=x;
        			 select count(id) into x from db9.user;
				 select x;	
				end
				//
				delimiter ;

				call say3(); 没给参数 报错
				call say3(9); 报错,有out功能 不能直接给值
				call say3(@i);

				set @k=4;
				call say3(@k);把值4给输入类型参数 x 
				select  @k;  保存输出类型参数x 的处理结果
		2.4 流程控制
		    2.4.1  条件判断

		    2.4.2  流程控制
			 2.4.2.1  if结构
				delimiter  //
				create procedure db9.say7(in linenum int)
				begin
				  if  linenum  <= 10 then
				   select * from  db9.user where  id <=10 ; 
				  else
                		   select  * from  db9.user where id > 10;
				  end if;
				end
				//
				delimiter ;

				call  say7(3);
				call  say7(11);
	休息到 11：16

			2.4.2.2 循环结构
				
			delimiter  //
			create procedure say9(in y int)
			begin
   				declare x int;
				set x = 1;
   				while x <= y do
  	    				select x;
	    				set x = x  + 1 ;
				end while;	
			end
			//
			delimiter ;
		
			call  say9(3);
			call  say9(5);

			delimiter  //
			create procedure say11( in  y int)
			begin
				declare x int;
				set x = 1;
				repeat
             				select x;
	     				set x = x  + 1 ;	
	     				until  x > y
				end repeat;
			end
			//
			delimiter ;
	
			call  say11(3);
			call  say11(5);

			delimiter  //
			create procedure say12()
			begin
    				loop
					select * from  db9.user where id=1;
    				end loop;
			end
			//
			delimiter ;

			call say12();

		     2.4.3  流程控制语句 
		     控制循环结构的执行 while   repeat  loop
		     LEAVE 结束循环 
		     ITERATE 结束当前循环 并开始下一次循环

 			delimiter  //
                        create procedure say13()
                        begin
                                declare x int;
                                set x = 1;
                                loadb1 :while x <= 10 do
					if x = 5 then
   					  LEAVE loadb1;
					end if;
                                        select x;
                                        set x = x  + 1 ;
                                  end while;
                        end
                        //
                        delimiter ;
			call say13();
			
			delimiter  //
			create procedure say14()
			begin
      				declare  x  int;
      				set x = 1;
      				abc:while  x <= 10 do
	   				if x = 5 then
	     					set x = x + 1;
	     					ITERATE abc;
	   				end if;
	   				select x;
	   				set x  = x + 1;
      				    end while;
 		        end
			//
			delimiter ;
			call say14();

			delimiter //
			create procedure p3(in x int)
			begin
				if x is null then	
            			   select  * from  db9.user where id=1;
				else
	    			   select  * from  db9.user where id <=x;
				end if;
			end
			//
			delimiter ;

			call p3(1);
			call p3(2);
			select  @w;
			call p3(@w);

++++++++++++++++++++++++++++++++++++++++++++++++++++
DBA2_DAY05  
一、数据分片
	2.1 数据分片介绍
		
	2.2 配置数据分片服务器
		2.3.1 mycat 软件介绍
		2.3.2 服务工作过程
		2.3.3 实验拓扑结构
		2.3.4 配置数据分片服务
		  装包
			]# rpm -qa  | grep  -i jdk
  			]# java -version
	]# tar -zxvf Mycat-server-1.6-RELEASE-20161028204710-linux.tar.gz
			]# mv mycat  /usr/local/
			]# cd /usr/local/mycat
			]# ls
			bin  catlet  conf  lib  logs  version.txt

		  修改配置文件
			定义连接mycat服务器使用用户名密码及数据库名和权限
			vim /usr/local/mycat/conf/server.xml

		

			配置数据分片
			]# cd /usr/local/mycat/conf/
			]# sed  -i  '56,77d' schema.xml
			]# sed  -i  '39,42d' schema.xml 
			]# vim schema.xml
				定义要分片的表
		 	
			根据数据分片的配置做相应的设置
			    建库
				mysql53]# mysql -uroot -p123qqq...A
			        create database db1;

				mysql54]# mysql -uroot -p123qqq...A
			        create database db2;
				
				mysql55]# mysql -uroot -p123qqq...A
			        create database db3;

			    用户授权
			mysql53]# mysql -uroot -p123qqq...A
				 mysql> grant all on *.* to  adminplj@"%" 
				 identified by "123qqq...A";

			mysql54]# mysql -uroot -p123qqq...A
                                 mysql> grant all on *.* to  adminplj@"%"
                                 identified by "123qqq...A";

			mysql55]# mysql -uroot -p123qqq...A
                                 mysql> grant all on *.* to  adminplj@"%"
                                 identified by "123qqq...A";	
				
		  启动mycat服务
			]# /usr/local/mycat/bin/mycat  start | status | stop 
			]# ls /usr/local/mycat/logs/

		  查看服务信息
			]# netstat  -utnlp  | grep  :8066
			]# ps -C java
			

		2.3.5 测试服务配置:
			2.3.5.1 客户端连接数据分片服务器访问数据
[root@mysql50 ~]# mysql  -h192.168.4.56 -P8066  -uroot  -p123456
mysql> show databases;
+----------+
| DATABASE |
+----------+
| TESTDB   |
+----------+
mysql> use TESTDB;
mysql> show tables;
+------------------+
| Tables in TESTDB |
+------------------+
| company          |
| customer         |
| customer_addr    |
| employee         |
| goods            |
| hotnews          |
| orders           |
| order_items      |
| travelrecord     |
+------------------+
9 rows in set (0.00 sec)
mysql> desc company;
ERROR 1146 (42S02): Table 'db3.company' doesn't exist
mysql> exit
Bye
[root@mysql50 ~]# 
			2.3.5.2 测试数据分片
				type=global
				根据表使用的分片规则建表
mysql> create  table company(ID int primary key auto_increment,
    -> cname char(50),
    -> addrees char(50)
    -> ,tel char(11)
    -> );
Query OK, 0 rows affected (0.80 sec)

mysql> desc company;
+---------+----------+------+-----+---------+----------------+
| Field   | Type     | Null | Key | Default | Extra          |
+---------+----------+------+-----+---------+----------------+
| ID      | int(11)  | NO   | PRI | NULL    | auto_increment |
| cname   | char(50) | YES  |     | NULL    |                |
| addrees | char(50) | YES  |     | NULL    |                |
| tel     | char(11) | YES  |     | NULL    |                |
+---------+----------+------+-----+---------+----------------+
4 rows in set (0.02 sec)

mysql> insert into company(cname,addrees,tel)values("tarena","beijing","888888");
Query OK, 1 row affected (0.17 sec)

mysql> insert into company(cname,addrees,tel)values("tarena","beijing","888888");
Query OK, 1 row affected (0.07 sec)

mysql> insert into company(cname,addrees,tel)values("tarena","beijing","888888");
Query OK, 1 row affected (0.09 sec)

mysql> select * from  company; (在数据库服务器53 54 55 本机能够看到同样的数据)
+----+--------+---------+--------+
| ID | cname  | addrees | tel    |
+----+--------+---------+--------+
|  1 | tarena | beijing | 888888 |
|  2 | tarena | beijing | 888888 |
|  3 | tarena | beijing | 888888 |
+----+--------+---------+--------+
3 rows in set (0.07 sec)

mysql> 
				枚举法规则
				rule="sharding-by-intfile"
				]# cd /usr/local/mycat/conf/
				]# vim  partition-hash-int.txt   //添加第3台数据库服务器
				10000=0
				10010=1
				10020=2
				:wq

 				]# /usr/local/mycat/bin/mycat  stop
  				]#/usr/local/mycat/bin/mycat  start
  				]# netstat -utnlp  | grep  :8066
				]# mysql -h192.168.4.56 -P8066 -uroot -p123456
mysql> create table employee1(
ID int primary key  auto_increment,
sharding_id int,
name char(10),age tinyint );
Query OK, 0 rows affected (1.26 sec)

mysql> desc employee;
+-------------+------------+------+-----+---------+----------------+
| Field       | Type       | Null | Key | Default | Extra          |
+-------------+------------+------+-----+---------+----------------+
| ID          | int(11)    | NO   | PRI | NULL    | auto_increment |
| sharding_id | int(11)    | YES  |     | NULL    |                |
| name        | char(10)   | YES  |     | NULL    |                |
| age         | tinyint(4) | YES  |     | NULL    |                |
+-------------+------------+------+-----+---------+----------------+
4 rows in set (0.00 sec)

mysql> insert into employee(sharding_id,name,age)values(10000,"bob",30);
Query OK, 1 row affected (0.12 sec)

mysql> mysql> insert into employee(sharding_id,name,age)values(10010,"tom",40);
Query OK, 1 row affected (0.04 sec)

mysql> mysql> insert into employee(sharding_id,name,age)values(10010,"tom",40);
mysql> insert into employee(sharding_id,name,age)values(10020,"tom",40);
				
mysql> select  * from employee;
+----+-------------+------+------+
| ID | sharding_id | name | age  |
+----+-------------+------+------+
|  1 |       10020 | tom  |   40 |
|  2 |       10020 | tom  |   40 |
|  1 |       10010 | tom  |   40 |
|  1 |       10000 | bob  |   30 |
+----+-------------+------+------+

			2.3.5.2 添加新表配置数据分片
			]#  /usr/local/mycat/bin/mycat  stop
  			]# netstat -utnlp  | grep  :8066			
			]# vim schema.xml

			<table name="employee" primaryKey="ID" dataNode="dn1,dn2,dn3"
                           rule="sharding-by-intfile" />

                        <table name="employee2" primaryKey="ID" dataNode="dn1,dn2,dn3"
                           rule="sharding-by-intfile" />
			:wq

			]#  /usr/local/mycat/bin/mycat  start
                        ]#  netstat -utnlp  | grep  :8066

]# mysql -h192.168.4.56 -P8066  -uroot -p123456
mysql> use TESTDB;
mysql> SHOW TABLES;
mysql> desc employee2;
ERROR 1146 (42S02): Table 'db3.employee2' doesn't exist

mysql> create table employee2(
    -> ID int primary key  auto_increment,
    -> sharding_id int,
    -> name char(10),age tinyint );

mysql> desc employee2;
+-------------+------------+------+-----+---------+----------------+
| Field       | Type       | Null | Key | Default | Extra          |
+-------------+------------+------+-----+---------+----------------+
| ID          | int(11)    | NO   | PRI | NULL    | auto_increment |
| sharding_id | int(11)    | YES  |     | NULL    |                |
| name        | char(10)   | YES  |     | NULL    |                |
| age         | tinyint(4) | YES  |     | NULL    |                |
+-------------+------------+------+-----+---------+----------------+
4 rows in set (0.01 sec)
mysql> insert into employee2(sharding_id,name,age)values(10020,"jerry",29);
mysql> insert into employee2(sharding_id,name,age)values(10020,"jerry",29);
mysql> insert into employee2(sharding_id,name,age)values(10020,"jerry",29);
mysql> select  * from employee2;
+----+-------------+-------+------+
| ID | sharding_id | name  | age  |
+----+-------------+-------+------+
|  1 |       10020 | jerry |   29 |
|  2 |       10020 | jerry |   29 |
|  3 |       10020 | jerry |   29 |
+----+-------------+-------+------+
3 rows in set (0.08 sec)

			添加新库配置数据分片

			]# /usr/local/mycat/bin/mycat  stop
  			]# netstat  -utnlp  | grep  :8066

			]# vim server.xml  //添加新库
			<user name="root">
			    <property name="schemas">TESTDB,bbsdb</property>
			</user>
			:wq

	]# vim  schema.xml   //添加表
	<schema name="bbsdb" checkSQLschema="false" sqlMaxLimit="100">
                <table name="user" primaryKey="ID" type="global" dataNode="dn1,dn2,dn3" />
                <table name="ygtab" primaryKey="ID" dataNode="dn1,dn2,dn3"
                        rule="sharding-by-intfile" />
        </schema>
	:wq
				                    休息 15分钟 到 11：10
	]# /usr/local/mycat/bin/mycat start
        ]# netstat -utnlp  | grep :8066

]# mysql -h192.168.4.56 -P8066  -uroot -p123456   //客户端连接56主机
mysql> show databases;  看到新库
+----------+
| DATABASE |
+----------+
| TESTDB   |
| bbsdb    |
+----------+
mysql> use bbsdb;
mysql> show tables;   看到新表
+-----------------+
| Tables in bbsdb |
+-----------------+
| user            |
| ygtab           |
+-----------------+



二、mysql性能优化


2.1 修改并发连接数
]# vim /etc/my.cnf
[mysqld]
max_connections=200
:wq

]# systemctl restart  mysqld

]# mysql -uroot  -pabc123
mysql>  show variables like "%conn%";
mysql>  show variables like  "max_connections";
mysql>  set  global  max_connections=200;
mysql>  show variables like  "max_connections";


mysql> show  global status like "Max_used_connections";
       公式 Max_used_connections/max_connections=0.85

查看与超时时间相关的变量
mysql> show variables like  "%timeout%" ;
mysql> set global connect_timeout=15;


缓存参数
mysql> show variables like  "%buffer%" ;

key_buffer-size    表名.MYI
sort_buffer_size   select name,uid  from db9.user order by  uid  desc;
read_buffer_size   select  * from db9.user;
		


允许保存在缓存中被重用的线程数量
mysql> show variables like  "%thread%" ;
mysql> show variables like "thread_cache_size";


为所有线程缓存的打开的表的数量
mysql> show variables like  "%open%" ;
mysql> show variables like "table_open_cache";

查询优化
	1  优化数据服务查询参数
		mysql> show variables like  "query_cache%" ;
		query_cache_type   OFF|ON

	vim /etc/my.cnf
	[mysqld]
		query_cache_type=on
	:wq
	
	mysql> show global status  like "qcache%";
	| Qcache_hits             | 90      | 在查询缓存里找到数据的次数
        | Qcache_inserts          | 100     | 查询请求总数
        | Qcache_lowmem_prunes    | 2      | 清除查询缓存数据的次数


	2  优化程序员访问数据的sql命令
	数据库服务日志类型： 服务的日记文件

2.1 错误日志(默认启用) 记录服务启动和运行过程中的信息 /var/log/mysqld.log
log-error=/var/log/mysqld.log

2.2  binlog日志（默认没有启用）

2.3 查询日志 （默认没有启用）记录执行的所有sql命令
   ]# vim /etc/my.cnf
      [mysqld]
      general-log     //启用查询日志
     :wq
   ]# systemctl  restart  mysqld

   ]#  tail  -f  /var/lib/mysql/主机名.log  //查看日志文件内容
2.4 慢查询日志 （默认没有启用）记录超过指定时间（默认10秒）
                               显示查询结果的sql命令
   ]# vim /etc/my.cnf
      [mysqld]
         slow-query-log  启用日志
         long-query-time=5  指定超时时间
         log-queries-not-using-indexes 记录没有时有索引的查询sql命令
   :wq

  ]# systemctl  restart  mysqld
  ]# ls /var/lib/mysql/mysql50-slow.log  日志文件
	
  ]# tail  -f /var/lib/mysql/mysql50-slow.log   查看日志文件内容
  ]# mysqldumpslow mysql50-slow.log   统计日志记录信息
  ]# mysqldumpslow mysql50-slow.log  > /root/sql.txt  存放到文件里
  ]#cat /root/sql.txt   查看文件内容

 休息到 16：05   （ 15分钟）
++++++++++++++++++++++++++++++++++
NoSQL  5day ( Redis  和  MongoDB)

NoSQL_DAY01  搭建redis服务器(192.168.4.50)
一、部署Redis服务
	1.1 数据库类型
		RDBMS:
		NoSQL:

	1.2 Redis介绍?
	
	1.3 搭建redis服务器
		1.3.1 装包
			]# rpm -q gcc  || yum  -y  install gcc
			]# tar -zxvf redis-4.0.8.tar.gz 
  			]# cd redis-4.0.8/
			]# make 
			]# make install
		1.3.2 初始化配置
			]# cd redis-4.0.8/utils
			
[root@mysql50 utils]# ./install_server.sh 
Welcome to the redis service installer
This script will help you easily set up a running redis server

Please select the redis port for this instance: [6379] 
Selecting default: 6379
Please select the redis config file name [/etc/redis/6379.conf] 
Selected default - /etc/redis/6379.conf
Please select the redis log file name [/var/log/redis_6379.log] 
Selected default - /var/log/redis_6379.log
Please select the data directory for this instance [/var/lib/redis/6379] 
Selected default - /var/lib/redis/6379
Please select the redis executable path [/usr/local/bin/redis-server] 
Selected config:
Port           : 6379
Config file    : /etc/redis/6379.conf
Log file       : /var/log/redis_6379.log
Data dir       : /var/lib/redis/6379
Executable     : /usr/local/bin/redis-server
Cli Executable : /usr/local/bin/redis-cli
Is this ok? Then press ENTER to go on or Ctrl-C to abort.
Copied /tmp/6379.conf => /etc/init.d/redis_6379
Installing service...
Successfully added to chkconfig!
Successfully added to runlevels 345!
Starting Redis server...
Installation successful!
[root@mysql50 utils]# 

		1.3.3 查看服务状态信息
[root@mysql50 utils]# netstat  -utnlp  | grep :6379
tcp        0      0 127.0.0.1:6379          0.0.0.0:*               LISTEN      21640/redis-server  
[root@mysql50 utils]# 
[root@mysql50 utils]# 
[root@mysql50 utils]# ps -C redis-server
  PID TTY          TIME CMD
21640 ?        00:00:00 redis-server
[root@mysql50 utils]# 


 		1.3.4 访问redis服务存取数据
[root@mysql50 utils]# redis-cli 
127.0.0.1:6379> 
127.0.0.1:6379> exit
[root@mysql50 utils]# 

[root@mysql50 utils]# redis-cli 
127.0.0.1:6379> 
127.0.0.1:6379> set name bob  存
OK
127.0.0.1:6379> get name      取
"bob"
127.0.0.1:6379> exit
[root@mysql50 utils]# 	

	      1.3.5 服务管理
			停止服务
			[root@mysql50 utils]# /etc/init.d/redis_6379 stop

			启动服务
			[root@mysql50 utils]# /etc/init.d/redis_6379 start

			设置服务连接密码(设置了密码后，停止服务是需要输入密码的)
			]# /etc/init.d/redis_6379 stop
			]# vim /etc/redis/6379.conf
				501 requirepass 123456
			:wq
			]# /etc/init.d/redis_6379 start

			连接有密码的redis服务
[root@mysql50 utils]# netstat  -utnlp  | grep :6379
tcp        0      0 127.0.0.1:6379          0.0.0.0:*               LISTEN      21897/redis-server  
[root@mysql50 utils]# 

[root@mysql50 utils]# redis-cli 
127.0.0.1:6379> set x 99
(error) NOAUTH Authentication required.
127.0.0.1:6379> 
127.0.0.1:6379> auth 123456  连接后输入密码
OK
127.0.0.1:6379> set x 99
OK
127.0.0.1:6379> get x
"99"
127.0.0.1:6379> exit

[root@mysql50 utils]# redis-cli  -a  123456   连接时 指定密码
127.0.0.1:6379> set y 100
OK
127.0.0.1:6379> get y
"100"
127.0.0.1:6379> exit
[root@mysql50 utils]# 


	    使用命令停止有密码的redis服务
		[root@mysql50 utils]# /etc/init.d/redis_6379 stop
Stopping ...
(error) NOAUTH Authentication required.
Waiting for Redis to shutdown ...
Waiting for Redis to shutdown ...

		[root@mysql50 utils]# redis-cli  -a  123456  shutdown
[root@mysql50 utils]# 
[root@mysql50 utils]# netstat  -utnlp  | grep :6379
[root@mysql50 utils]# 
		
	    使用脚本停止有密码的redis服务
		]# /etc/init.d/redis_6379 start
		]# vim /etc/init.d/redis_6379
			43 $CLIEXEC -p $REDISPORT -a 123456 shutdown
		:wq

		 ]# /etc/init.d/redis_6379 stop
		 ]# netstat  -utnlp  | grep :6379

	   1.3.6 数据管理,常用操作指令
127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>
127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> select 16
(error) ERR DB index is out of range
127.0.0.1:6379[1]> 
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys  *
1) "y"
2) "x"
3) "name"
127.0.0.1:6379> keys ?a?
(empty list or set)
127.0.0.1:6379> 
127.0.0.1:6379> keys ????
1) "name"
127.0.0.1:6379>127.0.0.1:6379>

127.0.0.1:6379> EXISTS age
(integer) 0
127.0.0.1:6379> 
127.0.0.1:6379> EXISTS name
(integer) 1
127.0.0.1:6379> 

127.0.0.1:6379> ttl name
(integer) -1
127.0.0.1:6379> 
127.0.0.1:6379> 
127.0.0.1:6379> EXPIRE  name 30
(integer) 1
127.0.0.1:6379> 
127.0.0.1:6379> ttl name
(integer) 23
127.0.0.1:6379> ttl name
(integer) 17
127.0.0.1:6379> ttl name
(integer) 0
127.0.0.1:6379> keys *
1) "y"
2) "x"
127.0.0.1:6379> 

127.0.0.1:6379> set i 101
OK
127.0.0.1:6379> type i
string
127.0.0.1:6379> set sex girl
OK
127.0.0.1:6379> 
127.0.0.1:6379> type  sex
string
127.0.0.1:6379>

127.0.0.1:6379> keys *
1) "y"
2) "sex"
3) "x"
4) "i"
127.0.0.1:6379> del x y
(integer) 2
127.0.0.1:6379> keys *
1) "sex"
2) "i"
127.0.0.1:6379>


127.0.0.1:6379> keys *
1) "sex"
2) "i"
127.0.0.1:6379> 
127.0.0.1:6379> select 1
OK
127.0.0.1:6379[1]> keys *
(empty list or set)
127.0.0.1:6379[1]> select  0
OK
127.0.0.1:6379> keys *
1) "sex"
2) "i"
127.0.0.1:6379> MOVE i 1
(integer) 1
127.0.0.1:6379> select  1
OK
127.0.0.1:6379[1]> keys *
1) "i"
127.0.0.1:6379[1]> select  0
OK
127.0.0.1:6379> keys *
1) "sex"
127.0.0.1:6379>

127.0.0.1:6379[1]> FLUSHALL
OK
127.0.0.1:6379[1]> keys *
(empty list or set)
127.0.0.1:6379[1]> select 0
OK
127.0.0.1:6379> keys *
(empty list or set)
127.0.0.1:6379> 


127.0.0.1:6379> set x 1
OK
127.0.0.1:6379> set y 2
OK
127.0.0.1:6379> set z 3
OK
127.0.0.1:6379> keys *
1) "z"
2) "y"
3) "x"
127.0.0.1:6379> FLUSHDB
OK
127.0.0.1:6379> keys *
(empty list or set)
127.0.0.1:6379>

127.0.0.1:6379> set x 100
OK
127.0.0.1:6379> set y 200
OK
127.0.0.1:6379> set z 300
OK
127.0.0.1:6379> keys *
1) "z"
2) "y"
3) "x"
127.0.0.1:6379> 
127.0.0.1:6379> save
OK
127.0.0.1:6379> 

127.0.0.1:6379> set i 99
OK
127.0.0.1:6379> keys *
1) "z"
2) "y"
3) "x"
4) "i"
127.0.0.1:6379> SHUTDOWN
not connected> exit

[root@mysql50 utils]# ls /var/lib/redis/6379/
dump.rdb


[root@mysql50 utils]# netstat  -utnlp  | grep  :6379
[root@mysql50 utils]# /etc/init.d/redis_6379 start
Starting Redis server...
[root@mysql50 utils]# redis-cli  -a 123456
127.0.0.1:6379> keys *
1) "i"
2) "z"
3) "x"
4) "y"
127.0.0.1:6379> 

	   1.3.7 配置文件解析
	   ]# vim /etc/redis/6379.conf
	 	计量单位
		常用配置项
		内存清除策略
		设置密码
  
二、部署LNMP+Redis
	2.1 搭建nginx网站服务器（192.168.4.50）
		2.1.1 安装nginx软件包   (10 分钟  到 10：37)
  			]# rpm -q httpd
  			]# netstat  -utnlp  | grep :80
  			]# systemctl  stop httpd
  			]# systemctl  disable httpd
			]# yum -y  install  pcre-devel  zlib-devel openssl-devel
  			]# tar -zxvf nginx-1.12.2.tar.gz 
  			]# cd nginx-1.12.2/
  			]# ./configure  --prefix=/usr/local/nginx 
  			]# make 
  			]# make install
  			]# ls /usr/local/nginx/
			   conf  html  logs  sbin
		 2.1.2 安装php-fmp软件包
			]# yum -y  install  php-fpm-5.4.16-42.el7.x86_64.rpm 
  			]# systemctl  start php-fpm
  			]# systemctl  enable php-fpm

  			]# netstat -utnlp  | grep  :9000
                        tcp   0  0 127.0.0.1:9000  0.0.0.0:*   LISTEN  2206/php-fpm: maste
	       
		2.1.3 运行nginx服务
			]# vim /usr/local/nginx/conf/nginx.conf
			65         location ~ \.php$ {
 			66             root           html;
 			67             fastcgi_pass   127.0.0.1:9000;
 			68             fastcgi_index  index.php;
 			69         #   fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
 			70             include        fastcgi.conf;
 			71         }
			:wq
			]#  /usr/local/nginx/sbin/nginx  -t
  			]#  /usr/local/nginx/sbin/nginx
  			]# netstat  -utnlp  | grep  :80


		2.1.4  编写php脚本文件 
			]#vim /usr/local/nginx/html/test.php
			<?php
				phpinfo();
			?>
			:wq

		2.1.5  在客户端254 打开浏览器 访问 50主机的网站服务
			http://192.168.4.50/test.php

	                                    休息到 11：15	
	2.2 搭建Redis服务器（192.168.4.51）
		装包
		初始化配置
		修改配置文件指定端口 服务ip地址 连接密码
		重启动服务
		查看服务信息

	
       2.3 配置php支持redis
	   2.3.1 安装提供redis模块的软件包
		]# yum -y  install php  php-devel
 		]# yum -y  install php-devel-5.4.16-42.el7.x86_64.rpm 
  
		]# tar -zxvf php-redis-2.2.4.tar.gz 
		]# cd phpredis-2.2.4/
		]# phpize 
		]# ls /usr/bin/php-config 
		]# ./configure  --with-php-config=/usr/bin/php-config
		]# make
		]# make install

		]# ls /usr/lib64/php/modules/
		curl.so  fileinfo.so  json.so  phar.so  redis.so  zip.so
	  2.3.2 配置 php 程序运行时 加在redis模块  (10分钟  到  14：12)
		]# vim /etc/php.ini
		  728 extension_dir = "/usr/lib64/php/modules/"
                  730 extension = "redis.so"
                :wq
		]# systemctl  restart php-fpm	      
	  2.3.3 查看php 是否支持redis
		]# php -m | grep  -i  redis		
		 redis
	  2.3.4 编写连接redis服务的php脚本，存储数据 查询数据
		]# cp  linkredis.php  /usr/local/nginx/html/
  		]# vim /usr/local/nginx/html/linkredis.php 
		<?php
 			$redis = new redis();
 			$redis->connect('192.168.4.51',6351);
 			$redis->auth("123456");
 			$redis->set("school","tarena");
 			echo $redis->get("school");
		?>
		:wq
	  2.3.5 在客户端254 打开浏览器 访问 50主机的网站服务或命令访问
		]# curl http://192.168.4.50/linkredis.php
			tarena
	  2.3.6 在redis服务器本机查看数据是否存储成功。
		]# [root@51 ~]# redis-cli  -h 192.168.4.51 -p 6351 -a 123456
		192.168.4.51:6351> keys *
		1) "school"
		2) "c"
		192.168.4.51:6351> get school
		"tarena"
		192.168.4.51:6351>


+++++++++++NoSQL_DAY02  部署redis集群++++++++++++++++++++++
一、创建redis集群
	1.1 在6台 redis服务器上运行服务 并启用集群配置  ( 16:40  )
		]# /etc/init.d/redis_6379 stop
		
		]# rm  -rf /var/lib/redis/6379/*
		
		]# vim /etc/redis/6379.conf
	    		port 6351
	    		bind 192.168.4.51
	    	       #requirepass 123456
	    		cluster-enabled yes
	    		cluster-config-file nodes-6351.conf
	    		cluster-node-timeout 5000
		:wq
		]# /etc/init.d/redis_6379 start
		]# netstat -utnlp  | grep :6351
		]# netstat -utnlp  | grep :16351

		]# ls /var/lib/redis/6379/nodes-6351.conf

	1.2 创建集群
		1.2.1 部署管理主机 （192.168.4.51）
		      安装依赖
			]# yum -y install ruby  rubygems
			]# yum -y  install ruby-devel-2.0.0.648-30.el7.x86_64.rpm
			]# gem  install redis-3.2.1.gem			
		      
		      创建管理集群的命令
			]# cd  redis-4.0.8/src
			]# mkdir /root/bin
			]# cp redis-trib.rb  /root/bin/    拷贝ruby脚本到系统目录
			]# chmod +x /root/bin/redis-trib.rb
			]# redis-trib.rb help  查看命令帮助信息

		1.2 2 创建集群
			[root@mysql51 src]# redis-trib.rb  create --replicas 1 \
			> 192.168.4.51:6351 \
			> 192.168.4.52:6352 \
			> 192.168.4.53:6353 \
			> 192.168.4.54:6354 \
			> 192.168.4.55:6355 \
			> 192.168.4.56:6356
>>> Creating cluster
>>> Performing hash slots allocation on 6 nodes...
Using 3 masters:
192.168.4.51:6351
192.168.4.52:6352
192.168.4.53:6353
Adding replica 192.168.4.55:6355 to 192.168.4.51:6351
Adding replica 192.168.4.56:6356 to 192.168.4.52:6352
Adding replica 192.168.4.54:6354 to 192.168.4.53:6353
M: 1c228b188a48147ccf164bee1141e268eee4e0b5 192.168.4.51:6351
   slots:0-5460 (5461 slots) master
M: e9929fec5cee80fb1e0d51e43b6fd2506e63ede0 192.168.4.52:6352
   slots:5461-10922 (5462 slots) master
M: 4da54a3eeb266bac76c514d5bf05ce40f4dca9e6 192.168.4.53:6353
   slots:10923-16383 (5461 slots) master
S: 86d90daab8a3f561c367e0e92edd034ba8d0d4c6 192.168.4.54:6354
   replicates 4da54a3eeb266bac76c514d5bf05ce40f4dca9e6
S: fbd4703a049014320587b9d1343473ab759b60cc 192.168.4.55:6355
   replicates 1c228b188a48147ccf164bee1141e268eee4e0b5
S: 3ecd861bdf5726c32e0e7ce7ca8f50c3aec79802 192.168.4.56:6356
   replicates e9929fec5cee80fb1e0d51e43b6fd2506e63ede0
Can I set the above configuration? (type 'yes' to accept): yes
>>> Nodes configuration updated
>>> Assign a different config epoch to each node
>>> Sending CLUSTER MEET messages to join the cluster
Waiting for the cluster to join...
>>> Performing Cluster Check (using node 192.168.4.51:6351)
M: 1c228b188a48147ccf164bee1141e268eee4e0b5 192.168.4.51:6351
   slots:0-5460 (5461 slots) master
   1 additional replica(s)
M: 4da54a3eeb266bac76c514d5bf05ce40f4dca9e6 192.168.4.53:6353
   slots:10923-16383 (5461 slots) master
   1 additional replica(s)
S: 3ecd861bdf5726c32e0e7ce7ca8f50c3aec79802 192.168.4.56:6356
   slots: (0 slots) slave
   replicates e9929fec5cee80fb1e0d51e43b6fd2506e63ede0
M: e9929fec5cee80fb1e0d51e43b6fd2506e63ede0 192.168.4.52:6352
   slots:5461-10922 (5462 slots) master
   1 additional replica(s)
S: fbd4703a049014320587b9d1343473ab759b60cc 192.168.4.55:6355
   slots: (0 slots) slave
   replicates 1c228b188a48147ccf164bee1141e268eee4e0b5
S: 86d90daab8a3f561c367e0e92edd034ba8d0d4c6 192.168.4.54:6354
   slots: (0 slots) slave
   replicates 4da54a3eeb266bac76c514d5bf05ce40f4dca9e6
[OK] All nodes agree about slots configuration.
>>> Check for open slots...
>>> Check slots coverage...
[OK] All 16384 slots covered.
[root@mysql51 src]# 


	1.3 集群中的主机查看状态信息（在任意一台服务器都可以看）
[root@mgm56 ~]# redis-cli  -h 192.168.4.56 -p 6356
192.168.4.56:6356> 
192.168.4.56:6356> cluster info
cluster_state:ok
cluster_slots_assigned:16384
cluster_slots_ok:16384
cluster_slots_pfail:0
cluster_slots_fail:0
cluster_known_nodes:6
cluster_size:3

192.168.4.56:6356> cluster nodes

4da54a3eeb266bac76c514d5bf05ce40f4dca9e6 192.168.4.53:6353@16353 master - 0 1551343639340 3 connected 10923-16383
e9929fec5cee80fb1e0d51e43b6fd2506e63ede0 192.168.4.52:6352@16352 master - 0 1551343640541 2 connected 5461-10922
fbd4703a049014320587b9d1343473ab759b60cc 192.168.4.55:6355@16355 slave 1c228b188a48147ccf164bee1141e268eee4e0b5 0 1551343639000 5 connected
1c228b188a48147ccf164bee1141e268eee4e0b5 192.168.4.51:6351@16351 master - 0 1551343640340 1 connected 0-5460
3ecd861bdf5726c32e0e7ce7ca8f50c3aec79802 192.168.4.56:6356@16356 myself,slave e9929fec5cee80fb1e0d51e43b6fd2506e63ede0 0 1551343639000 6 connected
86d90daab8a3f561c367e0e92edd034ba8d0d4c6 192.168.4.54:6354@16354 slave 4da54a3eeb266bac76c514d5bf05ce40f4dca9e6 0 1551343641000 4 connected
192.168.4.56:6356>

        
	创建集群失败的解决办法
	]# /etc/init.d/redis_6379  stop
        ]# rm -rf /var/lib/redis/6379/nodes-6351.conf 
        ]# rm -rf /var/lib/redis/6379/*
        ]# /etc/init.d/redis_6379 start

        ]# redis-trib.rb  create  --replicas 1  192.168.4.51:6351  192.168.4.52:6352  192.168.4.53:6353  192.168.4.54:6354  192.168.4.55:6355 192.168.4.56:6356


		
	1.4  在管理主机上查看集群信息和检测集群
[root@mysql51 ~]# redis-trib.rb  info  192.168.4.51:6351
192.168.4.51:6351 (1c228b18...) -> 0 keys | 5461 slots | 1 slaves.
192.168.4.53:6353 (4da54a3e...) -> 0 keys | 5461 slots | 1 slaves.
192.168.4.52:6352 (e9929fec...) -> 0 keys | 5462 slots | 1 slaves.
[OK] 0 keys in 3 masters.
0.00 keys per slot on average.
[root@mysql51 ~]# 


[root@mysql51 ~]# redis-trib.rb  check  192.168.4.52:6352
>>> Performing Cluster Check (using node 192.168.4.52:6352)
M: e9929fec5cee80fb1e0d51e43b6fd2506e63ede0 192.168.4.52:6352
   slots:5461-10922 (5462 slots) master
   1 additional replica(s)
S: 86d90daab8a3f561c367e0e92edd034ba8d0d4c6 192.168.4.54:6354
   slots: (0 slots) slave
   replicates 4da54a3eeb266bac76c514d5bf05ce40f4dca9e6
M: 4da54a3eeb266bac76c514d5bf05ce40f4dca9e6 192.168.4.53:6353
   slots:10923-16383 (5461 slots) master
   1 additional replica(s)
M: 1c228b188a48147ccf164bee1141e268eee4e0b5 192.168.4.51:6351
   slots:0-5460 (5461 slots) master
   1 additional replica(s)
S: 3ecd861bdf5726c32e0e7ce7ca8f50c3aec79802 192.168.4.56:6356
   slots: (0 slots) slave
   replicates e9929fec5cee80fb1e0d51e43b6fd2506e63ede0
S: fbd4703a049014320587b9d1343473ab759b60cc 192.168.4.55:6355
   slots: (0 slots) slave
   replicates 1c228b188a48147ccf164bee1141e268eee4e0b5
[OK] All nodes agree about slots configuration.
>>> Check for open slots...
>>> Check slots coverage...
[OK] All 16384 slots covered.
[root@mysql51 ~]#


	1.5  测试集群:在客户端50上 连接任意一台集群中的机器都可以存数据和取数据
	     从库会自动同步主库的数据到本机

	     [root@mysql50 ~]# redis-cli  -c  -h 192.168.4.51 -p 6351
	     192.168.4.51:6351> keys *
	     (empty list or set)
	192.168.4.51:6351> set  name bob
	192.168.4.51:6351> set age 99
	192.168.4.51:6351> set school tarena
	192.168.4.51:6351> keys *
	192.168.4.51:6351> get  age
	192.168.4.51:6351> get  name

	1.6 集群工作过程			

	1.7 测试集群的高可用功能
		当主库宕机后对应的从库 会自动升级为主库
		停止任意1台主库的redis服务 查看集群信息


二、管理redis集群（都是管理主机51上操作）
准备redis服务57 和 58  ：运行redis 服务 且启用集群功能

	2.1 向集群里添加新redis服务器
		2.1.1 添加master角色redis服务器
			1、在58主机上运行redis 服务 并启用了集群功能
			2、在管理主机51上做如下操作：
				1 把58主机添加到集群里
[root@mysql51 ~]# redis-trib.rb  add-node 192.168.4.58:6358  192.168.4.51:6351

>>> Adding node 192.168.4.58:6358 to cluster 192.168.4.51:6351
>>> Performing Cluster Check (using node 192.168.4.51:6351)
M: 1c228b188a48147ccf164bee1141e268eee4e0b5 192.168.4.51:6351
   slots:0-5460 (5461 slots) master
   1 additional replica(s)
M: 4da54a3eeb266bac76c514d5bf05ce40f4dca9e6 192.168.4.53:6353
   slots:10923-16383 (5461 slots) master
   1 additional replica(s)
M: 3ecd861bdf5726c32e0e7ce7ca8f50c3aec79802 192.168.4.56:6356
   slots:5461-10922 (5462 slots) master
   1 additional replica(s)
S: e9929fec5cee80fb1e0d51e43b6fd2506e63ede0 192.168.4.52:6352
   slots: (0 slots) slave
   replicates 3ecd861bdf5726c32e0e7ce7ca8f50c3aec79802
S: fbd4703a049014320587b9d1343473ab759b60cc 192.168.4.55:6355
   slots: (0 slots) slave
   replicates 1c228b188a48147ccf164bee1141e268eee4e0b5
S: 86d90daab8a3f561c367e0e92edd034ba8d0d4c6 192.168.4.54:6354
   slots: (0 slots) slave
   replicates 4da54a3eeb266bac76c514d5bf05ce40f4dca9e6
[OK] All nodes agree about slots configuration.
>>> Check for open slots...
>>> Check slots coverage...
[OK] All 16384 slots covered.
>>> Send CLUSTER MEET to node 192.168.4.58:6358 to make it join the cluster.
[OK] New node added correctly.
[root@mysql51 ~]# 
				练习 10分钟 到 10：20 					

				2 分配hash slot 给58主机
				]# redis-trib.rb  reshard    192.168.4.51:6351
					指定移出hash槽个数
					指定接收hash槽主机ID
					指定移出hash槽主机ID

				3 查看集群信息
				]# redis-trib.rb  check 192.168.4.51:6351

				4 50客户端访问58主机存取数据
				]# redis-cli  -c   -h 192.168.4.58 -p 6358
				> keys *
				> set v11  1001
				> get v11

		2.1.2 添加slave角色 redis服务器（192.168.4.57）     10分钟到10：37
			在主机57上运行redis服务，并启用了集群功能
			在管理主机51上做如下操作
		]# redis-trib.rb   add-node  --slave 192.168.4.57:6357  192.168.4.51:6351				
		]# redis-trib.rb   info  192.168.4.51:6351

		]# redis-trib.rb   check  192.168.4.51:6351						
		[root@mysql50 redis]# redis-cli  -c  -h 192.168.4.57 -p 6357
		192.168.4.57:6357> keys *

	2.2 把redis服务器从集群里移除
		2.2.1 从集群里移上除 slave角色 redis服务器
			[root@mysql51 ~]# redis-trib.rb  del-node  192.168.4.51:6351 07511d2688f4a8d3005471730db10a7a4cc8c672
>>> Removing node 07511d2688f4a8d3005471730db10a7a4cc8c672 from cluster 192.168.4.51:6351
>>> Sending CLUSTER FORGET messages to the cluster...
>>> SHUTDOWN the node.

[root@mysql51 ~]# redis-trib.rb  info  192.168.4.51:6351
[root@mysql51 ~]# redis-trib.rb  check  192.168.4.51:6351
		
		2.2.2 从集群里移除 master角色redis服务器
			1 释放主库占用的hash slot 槽
			  ]# redis-trib.rb  reshard  192.168.4.51:6351 
				指定移出hash槽个数
				指定接收hash槽主机ID
				指定移出hash槽主机ID

			2 移除主库
  			 ]# redis-trib.rb  del-node   192.168.4.51:6351  \
			 008840071433723a9621a28f2ca5552dd73cfc17
			
			3 查看信息
  			 ]# redis-trib.rb  info  192.168.4.51:6351 
  			 ]# redis-trib.rb  check  192.168.4.51:6351 

	平均分配hash slots
	[root@mysql51 ~]# redis-trib.rb rebalance  192.168.4.51:6351

	[root@mysql51 ~]# redis-trib.rb  info  192.168.4.51:6351 
 	192.168.4.51:6351 (1c228b18...) -> 2 keys | 5461 slots | 1 slaves.
	192.168.4.53:6353 (4da54a3e...) -> 4 keys | 5462 slots | 1 slaves.
	192.168.4.56:6356 (3ecd861b...) -> 3 keys | 5461 slots | 1 slaves.
	[OK] 9 keys in 3 masters.
	0.00 keys per slot on average.
	[root@mysql51 ~]# 

	2.3 把移除的redis服务器，再添加到集群里
		1 在数据库服务器本机清除集群信息
		  ]# /etc/init.d/redis_6379 start
		  ]# redis-cli -h ip地址  -p 端口
		  > cluster reset
		  > exit

		2 在管理主机上执行添加主机命令
		  ]# redis-trib.rb  add-node ip地址:端口 192.168.4.51:6351
		  ]# redis-trib.rb check 192.168.4.51:6351

+++++++++++NoSQL_DAY03+++++++++++++++++++++
一、Redis主从复制
	1.1 结构模式?
	1.2 对应命令
		info  replication       //查看复制信息
		SLAVEOF   ip地址 端口	//指定主库
		SLAVEOF  no  one        //恢复为主库
	***任意1台主机的redis服务运行后，默认都是主库。

	1.3 配置一主一52  把52配置为51的从库
		52配置如下：
		]# /etc/init.d/redis_6379 start
		]# redis-cli  -h 192.168.4.52 -p 6352
		   > slaveof 192.168.4.51 6351		
		   > info replication
			role:slave
			master_host:192.168.4.51
			master_port:6351
			master_link_status:up

		在51主机查看
		]# redis-cli  -h 192.168.4.51 -p 6351
		   > info replication
			role:master
			connected_slaves:1
		slave0:ip=192.168.4.52,port=6352,state=online,offset=70,lag=0

		在客户端50 连接主库51 存取数据，在从库本机会看到同样的数据
		]# redis-cli  -h 192.168.4.51 -p 6351
		 > 执行存取数据的命令

	       永久配置：在配置文件里指定主库.
		  ]#  vim /etc/redis/6379.conf
		          282  slaveof   192.168.4.51  6351
		      :wq
		  ]#  /etc/init.d/redis_6379 stop
		  ]#  /etc/init.d/redis_6379 start

	      配置有密码的主从复制
		 1 主库设置 连接密码
		   ]#  vim /etc/redis/6379.conf
		    501 requirepass 123456
		   :wq
		   ]# /etc/init.d/redis_6379 stop
		   ]# /etc/init.d/redis_6379 start
		   ]# vim  /etc/init.d/redis_6379
		      43 $CLIEXEC -h 192.168.4.51 -p 6351  -a 123456 shutdown
		   :wq

		 2 从库指定 主库连接密码 
		  ]# /etc/init.d/redis_6379  stop
		  ]# vim /etc/redis/6379.conf
			slaveof   192.168.4.51  6351
			masterauth "123456"
		     :wq
		 ]# /etc/init.d/redis_6379 start


	1.4 配置一主多从
	1.5 配置主从从
	1.6 主从复制工作过程

	1.7 哨兵模式 （哨兵服务，监视主库，当主库宕机后 从对应从库里的选举新的主库）
		在192.168.4.55上配置哨兵服务，监视主库51

		1  安装redis软件包

		2  创建服务主配置文件   （ 10分钟到  16：25 ）

		   ]# vim /etc/sentinel.conf
			bind 0.0.0.0
			sentinel monitor  db1 192.168.4.51 6351  1
			sentinel auth-pass  db1 123456
		   :wq

		3  启动服务
		  ]#  ping  -c  2  192.168.4.51
		  ]#  redis-sentinel /etc/sentinel.conf

		4  测试配置  16:45分钟
		     4.1 停止主库51的redis服务  ]# /etc/init.d/redis_6379 stop

		     4.2 查看55 服务监控信息 及 ]# cat  /etc/sentinel.conf

		     4.3 在从库上查看主从复制信息  > info replication

二、redis数据持久化(服务在运行过程中，自动把内存里数据 定期的保存到硬盘里)
	2.1 RDB
		2.1.1 RDB介绍 Redis数据库文件

		2.1.2 使用RDB文件恢复数据
			让新部署数据库服务器56 和当前主库数据一致
			主库操作：
				> keys *
				> save 
				> exit
			]#  cp /var/lib/redis/6379/dump.rdb  /root/
			]#  scp /root/dump.rdb  root@192.168.4.56:/root/

			56主机操作：
			 ]# /etc/init.d/redis_6379 stop
			 ]# rm  -rf  /var/lib/redis/6379/dump.rdb
			 ]# cp /root/dump.rdb /var/lib/redis/6379/
			 ]# /etc/init.d/redis_6379 start
			 > keys *

	     2.1.3 与RDB文件相关的配置项
			]# vim  /etc/redis/6379.conf
				dbfilename dump.rdb
				save 900 1
 				save 300 10
 				save 60 10000
			:wq

		   设置存盘间隔为120秒 10个key改变存盘
			]# /etc/init.d/redis_6379  stop
  			]# rm  -rf /var/lib/redis/6379/dump.rdb 
			]# vim /etc/redis/6379.conf
			       save 120 10
			:wq
			]# /etc/init.d/redis_6379 start
	   2.1.4 RDB优点/缺点
		

	2.2 AOF
		2.2.1 AOF介绍
			Append Only File

		2.2.2 相关配置参数 
		 	]# vim /etc/redis/6379.conf
				673 appendonly yes
				677 appendfilename "appendonly.aof"
		
				//AOF文件记录写操作的方式
			 	702 # appendfsync always
 			 	703 appendfsync everysec
                         	704 # appendfsync no

				//优化参数
				auto-aof-rewrite-min-size   64mb
				auto-aof-rewrite-percentage   100
			:wq

			]# /etc/init.d/redis_6379 start
			]# cat  /var/lib/redis/6379/appendonly.aof

	 	2.2.3 使用备份的aof文件恢复数据
			要求：51主机使用56的aof文件恢复数据

		        56主机：
			 ]# cp  appendonly.aof /root/
			 ]# scp  /root/appendonly.aof root@192.168.4.51:/root

			51主机：
			  ]# /etc/init.d/redis_6379 stop
			  ]# rm -rf /var/lib/redis/6379/*
			  ]# vim /etc/redis/6379.conf
			 	673 appendonly yes
			  :wq
			  ]# cp /root/appendonly.aof  /var/lib/redis/6379/
			  ]# /etc/init.d/redis_6379 start
			  ]# redis-cli  -h 192.168.4.51 -p 6351 -a 123456
			     > keys *

		修复AOF文件  192.168.4.51
			]# /etc/init.d/redis_6379  stop

			]# vim appendonly.aof  //把aof文件弄坏
			   aaaafdfafa
			:wq

			]# /etc/init.d/redis_6379 start
			]# redis-cli  -h 192.168.4.51 -p 6351 -a 123456
			> exit

			]# cd /var/lib/redis/6379/
			]# redis-check-aof  --fix  appendonly.aof 
			Continue? [y/N]: y

			]# rm -rf /var/run/redis_6379.pid
			]# /etc/init.d/redis_6379 start
			
			]# redis-cli  -h 192.168.4.51 -p 6351 -a 123456
			 > keys *
		AOF优点/缺点?
三、数据类型
		3.1 字符类型
		 练习10分钟到 11：40 

		 命令 set mset  get  mget  strlen  setrange getrange
		      decr  decrby    incr  incrby  incrbyfloat
		      setbit   bitcount    append

192.168.4.56:6356> set  tel  17101090999
OK
192.168.4.56:6356> get tel
"17101090999"
192.168.4.56:6356> set iphone 17101090999
OK
192.168.4.56:6356> get iphone
"17101090999"
192.168.4.56:6356> SETRANGE iphone 3 ****
(integer) 11
192.168.4.56:6356> get iphone
"171****0999"
192.168.4.56:6356> get tel
"17101090999"
192.168.4.56:6356> 
		
192.168.4.56:6356> STRLEN tel
(integer) 11
192.168.4.56:6356> STRLEN v1
(integer) 3
192.168.4.56:6356> get v1
"131"
192.168.4.56:6356> 

192.168.4.56:6356> get school
"tarena"
192.168.4.56:6356> APPEND school plj
(integer) 9
192.168.4.56:6356> get school
"tarenaplj"
192.168.4.56:6356> APPEND schoola plj
(integer) 3
192.168.4.56:6356> keys *
1) "v1"
2) "tel"
3) "iphone"
4) "schoola"
5) "sex"
6) "i"
7) "age"
8) "name"
9) "school"
192.168.4.56:6356> get schoola
"plj"
192.168.4.56:6356> 

   1m  =  1024k
   1k  =  1024字节
   1字节  =  8位 0  1
					休息到 11：10 
192.168.4.56:6356> setbit xiaojiu 1 1
(integer) 0
192.168.4.56:6356> setbit xiaojiu 2 0
(integer) 0
192.168.4.56:6356> setbit xiaojiu 3 1
(integer) 0
192.168.4.56:6356> setbit xiaojiu 4 1
(integer) 0
192.168.4.56:6356> setbit xiaojiu 5 1
(integer) 0
192.168.4.56:6356> setbit xiaojiu 6 0
(integer) 0
192.168.4.56:6356> setbit xiaojiu 7 0
(integer) 0
192.168.4.56:6356> setbit xiaojiu 8 1
(integer) 0
192.168.4.56:6356> BITCOUNT xiaojiu
(integer) 5
192.168.4.56:6356> 


192.168.4.56:6356> set x 9
OK
192.168.4.56:6356> decr x
(integer) 8
192.168.4.56:6356> decr x
(integer) 7
192.168.4.56:6356> get x
"7"
192.168.4.56:6356> 
192.168.4.56:6356> EXISTS k
(integer) 0
192.168.4.56:6356> decr k
(integer) -1
192.168.4.56:6356>


192.168.4.56:6356> set x 100
OK
192.168.4.56:6356> decrby x 20
(integer) 80
192.168.4.56:6356> decrby x 10
(integer) 70
192.168.4.56:6356> get x
"70"
192.168.4.56:6356> decr x
(integer) 69
192.168.4.56:6356> get x
"69"
192.168.4.56:6356>


192.168.4.56:6356> set x abcdef
OK
192.168.4.56:6356> get x
"abcdef"
192.168.4.56:6356> GETRANGE x 1 3
"bcd"
192.168.4.56:6356> GETRANGE x -3 -1
"def"
192.168.4.56:6356>


192.168.4.56:6356> set  y 7
OK
192.168.4.56:6356> get y
"7"
192.168.4.56:6356> INCR y
(integer) 8
192.168.4.56:6356> get y
"8"
192.168.4.56:6356> INCR y
(integer) 9
192.168.4.56:6356> get y
"9"
192.168.4.56:6356> INCRBY y  3
(integer) 12
192.168.4.56:6356> INCRBY y  3
(integer) 15
192.168.4.56:6356>

192.168.4.56:6356> INCRBY y  0.5
(error) ERR value is not an integer or out of range
192.168.4.56:6356> 
192.168.4.56:6356> INCRBYFLOAT y 0.5
"15.5"
192.168.4.56:6356> get y
"15.5"
192.168.4.56:6356> 
192.168.4.56:6356> INCRBYFLOAT y 1.5
"17"
192.168.4.56:6356> get y
"17"
192.168.4.56:6356>


192.168.4.56:6356> set i 1  j 2  k 3
(error) ERR syntax error
192.168.4.56:6356> 
192.168.4.56:6356> mset i 1  j 2  k 3
OK
192.168.4.56:6356> keys *

192.168.4.56:6356> get i j k
(error) ERR wrong number of arguments for 'get' command
192.168.4.56:6356> 
192.168.4.56:6356> mget i j k
1) "1"
2) "2"
3) "3"
192.168.4.56:6356>

		list类型:  练习到 14：20 

		命令：  lpush   rpush  lpop  rpop   lset  lindex   lrange   llen 

192.168.4.56:6356> keys *
192.168.4.56:6356> del name
192.168.4.56:6356> lpush name bob lucy lili jack
(integer) 4
192.168.4.56:6356> type name
list
192.168.4.56:6356> 
192.168.4.56:6356> 
192.168.4.56:6356> lpush name jerry dachui tiechu 
(integer) 7
192.168.4.56:6356> 
192.168.4.56:6356> LRANGE name 0 -1
1) "tiechu"
2) "dachui"
3) "jerry"
4) "jack"
5) "lili"
6) "lucy"
7) "bob"
192.168.4.56:6356> LRANGE name 0 2
1) "tiechu"
2) "dachui"
3) "jerry"
192.168.4.56:6356> LRANGE name -2 -1
1) "lucy"
2) "bob"
192.168.4.56:6356> LRANGE name 0 -2
1) "tiechu"
2) "dachui"
3) "jerry"
4) "jack"
5) "lili"
6) "lucy"
192.168.4.56:6356> 

192.168.4.56:6356> LRANGE name 0 -1
1) "tiechu"
2) "dachui"
3) "jerry"
4) "jack"
5) "lili"
6) "lucy"
7) "bob"
192.168.4.56:6356> lpop name
"tiechu"
192.168.4.56:6356> LLEN name
(integer) 6
192.168.4.56:6356> 
192.168.4.56:6356> LRANGE name 0 -1
1) "dachui"
2) "jerry"
3) "jack"
4) "lili"
5) "lucy"
6) "bob"
192.168.4.56:6356> lpop name
"dachui"
192.168.4.56:6356>

192.168.4.56:6356> LRANGE name 0 -1
1) "jerry"
2) "jack"
3) "lili"
4) "lucy"
5) "bob"
192.168.4.56:6356> LINDEX name 0
"jerry"
192.168.4.56:6356> LINDEX name 2
"lili"
192.168.4.56:6356> 
192.168.4.56:6356> LINDEX name 3
"lucy"
192.168.4.56:6356> LINDEX name 6
(nil)
192.168.4.56:6356> 

192.168.4.56:6356> LRANGE  name  0  -1
1) "jerry"
2) "jack"
3) "lili"
4) "lucy"
5) "bob"
192.168.4.56:6356> lindex name -2
"lucy"
192.168.4.56:6356> lindex name -1
"bob"
192.168.4.56:6356>


192.168.4.56:6356> LRANGE  name  0  -1
1) "jerry"
2) "jack"
3) "lili"
4) "lucy"
5) "bob"
192.168.4.56:6356> lset  name 1 tom
OK
192.168.4.56:6356> LRANGE  name  0  -1
1) "jerry"
2) "tom"
3) "lili"
4) "lucy"
5) "bob"
192.168.4.56:6356>

192.168.4.56:6356> LRANGE  name  0  -1
1) "jerry"
2) "tom"
3) "lili"
4) "lucy"
5) "bob"
192.168.4.56:6356> 
192.168.4.56:6356> rpush name A B C
(integer) 8
192.168.4.56:6356> 
192.168.4.56:6356> LRANGE  name  0  -1
1) "jerry"
2) "tom"
3) "lili"
4) "lucy"
5) "bob"
6) "A"
7) "B"
8) "C"
192.168.4.56:6356>


192.168.4.56:6356> LRANGE  name  0  -1
1) "jerry"
2) "tom"
3) "lili"
4) "lucy"
5) "bob"
6) "A"
7) "B"
8) "C"
192.168.4.56:6356> 
192.168.4.56:6356> rpop name
"C"
192.168.4.56:6356> 

		Hash表类型   练习10分钟 到  14：50 
		命令：  hset   hmset   hget  hmget  
			hkeys  hvals   hgetall  hdel 

set 公司名  tarena
set 地址 beijing
set 电话 8888888
set 法人 hanshaoyun
set 注册资金  100000000

	 hset  tarena  address  beijing
	 hset   tarena  tel 	8888888
	 hset  tarena  person	hsy
	 hset tarena   pay	10000000

192.168.4.56:6356> hget tarena url
(nil)
192.168.4.56:6356> hget tarena address
"beijing"
192.168.4.56:6356> 

192.168.4.56:6356> hmget tarena pay person tel
1) "10000000"
2) "hsy"
3) "8888888"
192.168.4.56:6356>

192.168.4.56:6356> hmset tarena url www.tedu.cn likes  5
OK
192.168.4.56:6356> hmget tarena url likes
1) "www.tedu.cn"
2) "5"
192.168.4.56:6356>

192.168.4.56:6356> HKEYS tarena
1) "address"
2) "tel"
3) "person"
4) "pay"
5) "url"
6) "likes"
192.168.4.56:6356> 

192.168.4.56:6356> HVALS tarena
1) "beijing"
2) "8888888"
3) "hsy"
4) "10000000"
5) "www.tedu.cn"
6) "5"
192.168.4.56:6356>


192.168.4.56:6356> HGETALL tarena
 1) "address"
 2) "beijing"
 3) "tel"
 4) "8888888"
 5) "person"
 6) "hsy"
 7) "pay"
 8) "10000000"
 9) "url"
10) "www.tedu.cn"
11) "likes"
12) "5"
192.168.4.56:6356>


192.168.4.56:6356> HKEYS tarena
1) "address"
2) "tel"
3) "person"
4) "pay"
5) "url"
6) "likes"
192.168.4.56:6356> 
192.168.4.56:6356> HDEL tarena likes url
(integer) 2
192.168.4.56:6356> 
192.168.4.56:6356> HKEYS tarena
1) "address"
2) "tel"
3) "person"
4) "pay"
192.168.4.56:6356>

++++++++++++++++++++++++++++++NoSQL_DAY04+++++++++++++++++++++++
一、部署MongoDB服务
	2.1 MongoDB 软件介绍
	2.2 部署MongoDB服务器 192.168.4.50
		2.2.1 装包 并创建工作目录
		811  tar -zxvf mongodb-linux-x86_64-rhel70-3.6.3.tgz 
  813  ls mongodb-linux-x86_64-rhel70-3.6.3
  814  ls mongodb-linux-x86_64-rhel70-3.6.3/bin/
  815  mkdir /usr/local/mongodb
  816  mkdir /usr/local/mongodb/etc
  817  mkdir /usr/local/mongodb/log
  818  mkdir -p /usr/local/mongodb/data/db
  819  cp -r mongodb-linux-x86_64-rhel70-3.6.3/bin /usr/local/mongodb/
  820  ls /usr/local/mongodb/
			bin  data  etc  log
		2.2.2 创建配置文件
			]# vim /usr/local/mongodb/etc/mongodb.conf
				dbpath=/usr/local/mongodb/data/db
				logpath=/usr/local/mongodb/log/mongodb.log
				logappend=true
				fork=true
			:wq

		2.2.3 启动服务
]# alias mdbstart='/usr/local/mongodb/bin/mongod -f /usr/local/mongodb/etc/mongodb.conf'

]# vim /root/.bashrc
alias mdbstart='/usr/local/mongodb/bin/mongod -f /usr/local/mongodb/etc/mongodb.conf'
:wq

		2.2.4 查看服务信息
[root@mysql50 ~]# netstat  -utnlp  | grep  :27017
tcp        0      0 127.0.0.1:27017         0.0.0.0:*         LISTEN      5713/mongod         
[root@mysql50 ~]# ps -C  mongod 
  PID TTY          TIME CMD
 5713 ?        00:00:01 mongod
			
		停止服务的命令
]# /usr/local/mongodb/bin/mongod -f /usr/local/mongodb/etc/mongodb.conf --shutdown

]# alias  mdbstop='/usr/local/mongodb/bin/mongod -f /usr/local/mongodb/etc/mongodb.conf --shutdown'

]# vim /root/.bashrc
alias  mdbstop='/usr/local/mongodb/bin/mongod -f /usr/local/mongodb/etc/mongodb.conf --shutdown'
:wq


		2.2.5 访问服务
		]# /usr/local/mongodb/bin/mongo  连接服务
		>  exit                          断开连接
		
		2.2.6 修改服务使用的ip地址和端口号   (10分钟 到 16：32)
		]# netstat  -utnlp  | grep  mongod
		]# vim /usr/local/mongodb/etc/mongodb.conf
		   	bind_ip=192.168.4.50
			port=27050
		   :wq
		]# mdbstop
		]# mdbstart
		]# netstat  -utnlp  | grep  mongod

		]# /usr/local/mongodb/bin/mongo  --host 192.168.4.50 --port 27050
		> exit

二、MongoDB基本使用
	2.1 常用管理命令  休息到 17：15 
		2.2.1 数据库管理命令
			]# /usr/local/mongodb/bin/mongo --host 192.168.4.50 --port 27050
			> show dbs    显示已有的库
			> use gamedb  创建或切换库
			> db          显示当前所在的库
		2.2.2 集合管理命令
			> show tables 显示已有的集合
		2.2.3 文档管理命令
			> db.t1.save({name:"bob",age:19}) 添加文件	
			> show tables
> db.t1.insert({name:"tom",school:"tarena",sex:"girl",mail:"tom@tedu.cn" }) 添加文档

		        > db.t1.find() 查看所有行
			> db.t1.findOne()  查看查看第1行
			> db.t1.count()    统计行个数
			> db.t1.remove({name:"tom"}) 删除与条件匹配的行
			> db.t1.find()  
			> db.t1.remove({}) 删除所有行
			> show tables
			> db.t1.drop()  删除集合
			> show tables;
			> db
			> db.dropDatabase() 删除当前所在的库
			> show dbs


	2.3 数据导入导出
		2.3.1 mongoexport 导出： 把集合里的文档保存到系统文件里
			命令格式?
			
> use gamedb
> db.t1.save({name:"bob",age:19})
> db.t1.save({name:"tom",age:21,sex:"girl"})
> db.t1.save({name:"jack",age:38,sex:"boy",mail:"jack@163.com"})
> db.t1.count()
> db.t1.find()

]# mkdir /mdbdata

]# /usr/local/mongodb/bin/mongoexport --host 192.168.4.50 --port 27050 \
-d gamedb -c t1   -f name,age,sex --type=csv  > /mdbdata/t1.csv

[root@mysql50 ~]# cat /mdbdata/t1.csv 
name,age,sex
bob,19,
tom,21,girl
jack,38,boy


]# /usr/local/mongodb/bin/mongoexport --host 192.168.4.50 --port 27050 -d gamedb -c t1    --type=json > /mdbdata/t1.json

[root@mysql50 ~]# cat /mdbdata/t1.json 
{"_id":{"$oid":"5c7a4bd81d0f5c8050ff7230"},"name":"bob","age":19.0}
{"_id":{"$oid":"5c7a4be91d0f5c8050ff7231"},"name":"tom","age":21.0,"sex":"girl"}
{"_id":{"$oid":"5c7a4c001d0f5c8050ff7232"},"name":"jack","age":38.0,"sex":"boy","mail":"jack@163.com"}
[root@mysql50 ~]# 


		2.3.2 mongoimport 导入： 把系统文件的内容存储到集合里
删除集合
> use gamedb
> db.t1.drop()
	
导入json格式文件	
]# /usr/local/mongodb/bin/mongoimport  --host 192.168.4.50 --port \
27050 -d gamedb  -c t1  --type=json  /mdbdata/t1.json 

查看集合内容
 > use gamedb
 > show tables
 > db.t1.find()		



删除集合
> use gamedb
> db.t1.drop()


]# /usr/local/mongodb/bin/mongoimport  --host 192.168.4.50 --port  27050 \ 
  -d  gamedb  -c  t1  --headerline --type=csv  /mdbdata/t1.csv

查看集合内容
 > use gamedb
 > show tables
 > db.t1.find()


[root@mysql50 ~]# /usr/local/mongodb/bin/mongoimport  --host 192.168.4.50 --port  27050 -d  gamedb  -c  t1  --headerline --drop  --type=csv  /mdbdata/t1.csv
2019-03-02T18:00:15.541+0800	connected to: 192.168.4.50:27050
2019-03-02T18:00:15.541+0800	dropping: gamedb.t1
2019-03-02T18:00:15.741+0800	imported 3 documents
[root@mysql50 ~]# 

	练习：把/etc/passwd文件的内容存储到mongodb服务器的 userdb库下的user集合里。
		1  把/etc/passwd文件的内容修改为csv格式
		   ]# cp /etc/passwd  /root/
		   ]# sed  -i  's/:/,/g'  /root/passwd 
		   ]# sed -i '1iname,password,uid,gid,comment,homedir,shell' /root/passwd

		2  执行数据导入命令
		   ]# /usr/local/mongodb/bin/mongoimport --host 192.168.4.50 --port 27050 \			 -d userdb  -c user --headerline  --type=csv  /root/passwd

		3  连接mongodb服务，查看数据
		   ]# /usr/local/mongodb/bin/mongo --host 192.168.4.50 --port 27050
		   > show dbs
		   > use userdb
		   > show tables
		   > db.user.count()
		   > db.user.find()

    练习到09：30

	2.2 基本数据类型
		mysql  create  database  db1;
		       create  table db1.t1(name char(3),age int);

		MongoDB  use db1
			 db.t1.save({age:9,name:"bob"})

  11111111 11111111 11111111 11111111
   255    *  255   *  255    * 255     * 255  * 255  *  255  * 255
		2.2.1 数值类型
			> db.t2.save({name:"jim",pay:21888})
			> db.t2.save({name:"jack",pay:28888.88})
			> db.t2.save({name:"jack2",pay:NumberInt(28888.88)})
			> db.t2.save({name:"jack3",pay:NumberLong(28888.88)})
2019-03-04T09:54:37.976+0800 E QUERY    [thread1] Error: number passed to NumberLong must be representable as an int64_t :
@(shell):1:30
			> db.t2.save({name:"jack3",pay:NumberLong(28888)})
			  WriteResult({ "nInserted" : 1 })
			
		2.2.2 字符类型
			> db.t2.save({school:"tarena",班级:"云计算"})

		2.2.3 布尔bool 真true  假false
			> db.t2.save({name:"bob",marry:false,card:true})

		2.2.4 空null
		        > db.t2.save({name:"jerry",baby:null})
		
		2.2.5 数组array	
			> db.t2.save({
			 school:"tarena",
			 pay:28888,
			 fangxiang:["php","java","linux","hadoop"]
			 })

		2.2.6 代码  <?php  echo "welcome tarena"; ?>
			> db.t2.save({
			  lname:"php" , 
			  daima:function(){/*<?php  echo "welcome tarena"; ?> */}
                          })		

		2.2.7 日期 > db.t2.save({ name:"tom", birthday:new Date() })
		2.2.8 对象 > db.t2.save({ name:"alice", x:ObjectId() })

		2.2.9 内嵌
> db.t2.save(
... {
... tarena:{address:"beijing",tel:"666888",worker:"hsy",url:"www.tedu.cn"},
... baidu:{address:"beijing",tel:"999888",worker:"me",url:"www.baidu.com"}
... }
... )

	        2.2.10 正则表达式 > db.t2.save({gn:"匹配空行",bds:/^$/})

	      练习到 11：00   休息到 11：15


	2.4 数据备份与恢复
	数据备份格式:
	]# mongodump --host  ip地址  --port  端口 
	]# mongodump --host  ip地址  --port  端口    -d  数据库名  -c  集合名 -o 目录

	数据恢复格式:
	]#mongorestore --host  IP地址 --port  端口 -d  数据库名 -c  集合名  备份目录名 
		
		2.4.1 部署新数据库服务器192.168.4.51 

		2.4.2 使用数据恢复 让服务器192.168.4.51有和服务器192.168.4.50一样的数据

			2.4.2.1  在50主机备份数据 并把备份文件发送给51
				]# mkdir /userdbbak

]# /usr/local/mongodb/bin/mongodump --host 192.168.4.50 --port \
> 27050  -d userdb -c user  -o /userdbbak

				]# scp -r /userdbbak  root@192.168.4.51:/root/

			2.4.2.2  在51主机使用备份文件恢复数据
]# /usr/local/mongodb/bin/mongorestore  --host 192.168.4.51 --port 27051 \
> -d userdb -c user  /root/userdbbak/userdb/user.bson 


				50 备份所有数据
]# cd /root
]# /usr/local/mongodb/bin/mongodump  --host 192.168.4.50 --port 27050
]# scp  -r /root/dump   root@192.168.4.51:/tmp/

				51 恢复所有数据
]# /usr/local/mongodb/bin/mongorestore  --host 192.168.4.51 --port 27051 --drop /tmp/dump


				50 备份一个库的所有数据
]# /usr/local/mongodb/bin/mongodump  --host 192.168.4.50 --port 27050  -d db15  -o  /tmp/
]# scp -r /tmp/db15  root@192.168.4.51:/root/


				51 恢复一个库的所有数据
]# /usr/local/mongodb/bin/mongorestore  --host 192.168.4.51 --port 27051 --drop  \
   -d db15  /root/db15/

+++++++++++++NoSQL_day05++++++++++++++++++

一、MongoDB副本集 (就是mongodb服务的高可用集群)
	1.1 副本集介绍？
	    副本集工作过程？
	    副本集相关命令？
			rs.help()
			rs.status()
			rs.isMaster()

	1.2 配置副本集
		1.2.1  准备3台mongodb服务器  51  52  53 ( 14:48 )   
		        ip_address    port
			192.168.4.51  27051
			192.168.4.52  27052
			192.168.4.53  27053

		1.2.2 分别在3台mongodb服务器上启用副本集配置项目
			]# /usr/local/mongodb/bin/mongod \
			   -f /usr/local/mongodb/etc/mongodb.conf  --shutdown

			]# vim /usr/local/mongodb/etc/mongodb.conf
				replSet=rs1
			:wq
			
			]# /usr/local/mongodb/bin/mongod \
			  -f /usr/local/mongodb/etc/mongodb.conf

			]# netstat -utnlp  | grep mongod
								15分钟到 16：38
		1.2.3 定义集群成员
config = {
 _id:"rs1", 
 members:[
           {_id:0 , host:"192.168.4.51:27051"},
    	   {_id:1 , host:"192.168.4.52:27052"},
           {_id:2 , host:"192.168.4.53:27053"}
        ]
}

{
	"_id" : "rs1",
	"members" : [
		{
			"_id" : 0,
			"host" : "192.168.4.51:27051"
		},
		{
			"_id" : 1,
			"host" : "192.168.4.52:27052"
		},
		{
			"_id" : 2,
			"host" : "192.168.4.53:27053"
		}
	]
}





		1.2.4 创建集群
> rs.initiate(config)
{
	"ok" : 1,
	"operationTime" : Timestamp(1551687118, 1),
	"$clusterTime" : {
		"clusterTime" : Timestamp(1551687118, 1),
		"signature" : {
			"hash" : BinData(0,"AAAAAAAAAAAAAAAAAAAAAAAAAAA="),
			"keyId" : NumberLong(0)
		}
	}
}
			
rs1:SECONDARY> 
rs1:PRIMARY>
	1.3 查看配置信息
		1.3.1 在每1台服务器上查看状态信息
			> rs.status()

		1.3.2 显示是否是主库
			> rs.isMaster()

	1.4 验证配置  10分钟 到 17：05
		1.4.1 客户端50连接主库51 存储数据和访问从库是也可以查看到数据
			]# /usr/local/mongodb/bin/mongo --host 192.168.4.51 --port 27051
			rs1:PRIMARY> show dbs
			rs1:PRIMARY> use buydb
			rs1:PRIMARY> db.atab.save({name:"bob"})
			
			~]# /usr/local/mongodb/bin/mongo --host 192.168.4.52 --port 27052
			rs1:SECONDARY> db.getMongo( ).setSlaveOk()
			rs1:SECONDARY> show dbs
	 		rs1:SECONDARY> db.atab.find()

		1.4.2   测试副本集的高可用功能
			把当前主库51的服务停止，会自动在副本主机里选择-个新主机做主库
			
		1.4.3   把主机51 ～ 53 还原为 独立的数据库 服务器


二、文档管理（数据管理）192.168.4.50 userdb  user    17:20 上课
	2.1 向集合里添加新数据  命令 save()  insert() insertMany()

	use userdb

	db.t1.save({_id:9,name:"bob"})
	db.t1.insert({_id:11,name:"lucy"})

	db.t1.save({_id:9,name:"lilei"})
	db.t1.insert({_id:9,name:"lilei"})

db.t2.insertMany(
[
 {name:"bob",age:19},
 {name:"tom",mail:"tom@163.com"},
 {name:"jerry",sex:"girl"}
]
)

	db.t1.find()

	2.2 查询集合里的数据
		命令: find()      findOne()     count()  sort() skip()    limit()
		      显示所有行  值显示第1行  统计行数   排序  跳过几行  显示显示行数

		> db.user.find()

		> db.user.find().limit(10)
		> db.user.find({},{_id:0}).limit(1)
		> db.user.find({},{_id:0,password:0}).limit(1)
		> db.user.find({},{_id:0,name:1,uid:1}).limit(1)
		> db.user.find({shell:"/sbin/nologin"},{_id:0,name:1,shell:1}).limit(5)

 > db.user.find({shell:"/sbin/nologin"},{_id:0,name:1,shell:1,uid:1}).sort({uid:-1})

 > db.user.find({shell:"/sbin/nologin"},{_id:0,name:1,shell:1,uid:1}).sort({uid:1})

		> db.user.find({},{_id:0,name:1}).skip(2)


	2.5 查询、修改、删除数据的匹配条件
		2.5.1 数值比较
			大于 大于等于  小于  小于等于 不相等
			$gt  $gte      $lt   $lte     $ne

		> db.user.find({   uid:{$gt:10}   },{_id:0,uid:1,name:1})

		> db.user.find({uid:{$gte:10,$lte:30}},{_id:0,uid:1,name:1}).count()

                > db.user.find({uid:{$gte:10,$lte:30}},{_id:0,uid:1,name:1})
		
		2.5.2 字符比较		
			> db.user.find({name:"adm"},{_id:0,name:1})

			> db.user.find({name:{$nin:["adm"]}  },{_id:0,name:1})

		2.5.3 范围内匹配  $in  $nin  

> db.user.find({ uid:{$in:[1,6,9]} },{_id:0,name:1,uid:1})

> db.user.find({ name:{$in:["mysql","apache","bin"]} },{_id:0,name:1,uid:1})

> db.user.find({shell:{$nin:["/bin/bash","/sbin/nologin"]} },{_id:0,name:1,shell:1})

		2.5.4 逻辑或比较 $or
> db.user.find({$or:[{name:"adm"},{name:"mysql"},{uid:3}]},{_id:0,name:1,uid:1})

		2.5.5 正则匹配
		> db.user.find({name:/^...$/},{_id:0,name:1})
		> db.user.find({name:/^a/},{_id:0,name:1})


		2.5.6 相等比较 字段名:值
		  > db.user.find({shell:"/sbin/nologin"},{_id:0,name:1,uid:1})			
		  > db.user.find({uid:1},{_id:0})

		2.5.7 逻辑与比较
 		 > db.user.find({uid:0,name:"root"},{_id:0})

		1.5.8 匹配null
		 > db.user.find({name:null},{_id:0})
		> 
		 > db.user.save({name:null,uid:2001})
			WriteResult({ "nInserted" : 1 })

		 > db.user.find({name:null},{_id:0})
 			{ "name" : null, "uid" : 2001 }
 
		2.3 修改集合里的数据 update()  $set  $unset
			> db.集合名.update({条件},{字段:值，字段:值})

			> db.user.find({uid:0})
			> db.user.update({uid:0},{name:"root",password:"A",uid:0})
			> db.user.find({uid:0})


			> db.user.find({uid:0},{_id:0})
			> db.user.update({uid:0},{  $set:{ password:"F" , name:"roota" } })			   > db.user.find({uid:0},{_id:0})

			false,true 修改与 条件匹配所有文档 字段的值

			> db.user.find({uid:{ $lte:5 }},{_id:0,name:1,password:1})
			> db.user.update({uid:{ $lte:5 }},{$set:{password:"A"}})
			> db.user.find({uid:{ $lte:5 }},{_id:0,name:1,password:1})

			> db.user.update({uid:{ $lte:5 }},{$set:{password:"A"}},false,true)			   > db.user.find({uid:{ $lte:5 }},{_id:0,name:1,password:1})

			删除文档字段  $unset
			> db.user.find({uid:0},{_id:0})
			> db.user.update({uid:0},{ $unset:{ password:"A" , uid:0} })
			> db.user.find({name:"roota"},{_id:0})

			给文件文档添加新字段 $set
			> db.user.update({name:"roota"},{$set:{password:"x",gid:0,}})
			> db.user.find({name:"roota"},{_id:0})
			
			字段值自加或自减 $inc
`			> db.user.find({uid:{$lte:10}},{_id:0,name:1,uid:1})
			> db.user.update({uid:{$lte:5}},{$inc:{uid:2}},false,true)
			> db.user.update({uid:{$lte:5}},{$inc:{uid:-1}},false,true)
			
			给数组类型字段添加新元素 $push(重复添加)
			> db.user.save({name:"bob",likes:["a","b","c","d"]})

			> db.user.find({name:"bob"},{_id:0})

			> db.user.update({name:"bob"},{$push:{ likes:"e" }})
			> db.user.update({name:"bob"},{$push:{ likes:"e" }})

			给数组类型字段添加新元素 $addToSet（避免重复添加）
			> db.user.find({name:"bob"},{_id:0})
			> db.user.update({name:"bob"},{$addToSet:{ likes:"e" }})
			> db.user.find({name:"bob"},{_id:0})

			从数组头部删除一个元素 $pop
			> db.user.find({name:"bob"},{_id:0})
			> db.user.update({name:"bob"},{$pop:{likes:1}})	
			> db.user.update({name:"bob"},{$pop:{likes:-1}})		

			删除数组指定元素 $pull
			> db.user.update({name:"bob"},{$pull:{likes:"e"}})
			> db.user.find({name:"bob"},{_id:0})


		2.4 删除集合里的数据 remove()
			2.4.1 删除与条件匹配的文档
				> db.集合名.remove({条件})
		
			2.4.2 删除所有文档
				> db.集合名.remove({})  只删除文档 索引没有被删除
		2.5 删除集合
			        > db.集合名.drop()  删除 文档+ 索引
++++++++++++++++++++++++++++++++++++++++++
数据库管理课程总结：17天 
  RDBMS ： MySQL 、 Oracle 、 SQL SERVER
  NoSQL :  Redis 、 MongoDB

能够胜任的工作职位 : 数据库管理员 、 DBA  、架构师

  数据被频繁访问和需要快速存储 Redis 或 MongoDB 里
  数据需要永久存储且信息格式固定 MySQL 、 Oracle 、 SQL SERVER

复习所有知识
mysql练习题  DBA1-day03-test.txt   grant-test.txt

数据库课程综合实验(给公司架设网站服务器) project-4.txt

++++++++++++++++++++++++++++++++++安全与监控++++++++++++++++++++++++++++++

安全与监控_day01
一、Linux基本防护()
	1.1 用户管理  
	        相关文件 /etc/passwd  /etc/shadow  /etc/login.defs   /etc/skel/*
		相关命令 id chage   passwd 

		]# id tom
		]# useradd  tom
		]# echo 123456  | passwd --stdin tom

		]# grep  tom /etc/passwd
		]# grep  tom /etc/shadow
		
		]# passwd -S tom
		]# chage  -l tom
		
		]# chage   -d  0  tom
		]# chage  -E 2019-03-31 tom

		]# passwd -l tom
		]# passwd -u tom

		]# ls  -a  /etc/skel/
		]# cp redis-4.0.8.tar.gz  /etc/skel/
		]# useradd   jerry
		]# echo  123456  | passwd  --stdin  jerry
		]# su  -  jerry
		]# pwd
		]# ls  -a
	1.2 隐藏系统版本和系统内核版本 （修改文件内容即可）
		]# vim /etc/issue  本地登陆隐藏

		]# vim /etc/issue.net 网络登陆隐藏

		]# vim  /etc/redhat-release  记录系统版本

	1.3 文件系统安全 
		1.3.1  禁用非必要的系统服务
  			RHEL7  ]# systemctl  disable  httpd
			       ]# systemctl  enable   httpd

			RHEL6  ]# chkconfig httpd  on
			       ]# chkconfig httpd  off

 
		1.3.2 锁定/解锁保护文件 charrt  lsattr
 
			属性i：不可变 (vim  rm  mv )	
			属性a：仅可追加 (>>)
			
			 
	                lsattr  /etc/passwd
			chattr +a /etc/passwd
			chattr -a /etc/passwd
			
			echo  123456  > /root/test.txt
			chattr  +i /root/test.txt

二、用户切换与提权
    2.1 用户切换 su  [-] 用户
		 root  ---- > tom
		 tom   -----> root
		 tomm  -----> bob
		 ]#su  -
		 /var/log/secure  记录su

		 tom]$  su  -  -c "touch  /root/a.txt"  root


    2.2 用户提权 sudo ()
	2.2.1 普通用戶查看sudo授权 ]# sudo  -l
	2.2.2 普通用戶執行sudo授权 ]# sudo 提权命令

        2.2.3 sudo授权主配置文件 /etc/sudoers
		提權格式
		用户      主机列表=命令列表
		%用户zu   主机列表=命令列表

	2.2.4 打開提權文件
	]# visudo
        :wq

	]# vim /etc/sudoers
       
	:wq!


	提權例子
		1 在系統裏添加3個普通用 dachui  tiechui  niuben 並設置密碼123456

		2 提權
		]# vim  /etc/sudoers
		92 root    ALL=(ALL)       ALL
dachui localhost,mysql50=/usr/bin/vim /etc/httpd/conf/httpd.conf , /usr/bin/systemctl * httpd		   

tiechui  localhost,mysql50=/usr/bin/vim /etc/my.cnf , /usr/bin/systemctl * mysqld


niuben   localhost,mysql50=/usr/bin/vim /etc/httpd/conf/httpd.conf , /usr/bin/systemctl * h
ttpd , /usr/bin/vim /etc/my.cnf , /usr/bin/systemctl * mysqld

		99 #%wheel ALL=(ALL)       ALL
:wq!
	
	2.2.5 sudo别名设置()
			User_Alias  OPERATORS=jerry,tom,tsengyia
			Host_Alias  MAILSERVERS=mail,smtp,pop,svr7
			Cmnd_Alias  SOFTMGR=/bin/rpm,/usr/bin/yum
   			
			OPERATORS   MAILSERVERS=SOFTMGR


	vim /etc/sudoers


Cmnd_Alias      MYCMND=/usr/bin/vim /etc/httpd/conf/httpd.conf,/usr/bin/systemctl * httpd , /usr/bin/vim /etc/my.cnf , /usr/bin/systemctl * mysqld

Cmnd_Alias      SOFTMGM=/bin/yum , /bin/rpm

Host_Alias      MYPC=localhost,mysql50

dachui  MYPC=/usr/bin/vim /etc/httpd/conf/httpd.conf , /usr/bin/systemctl * httpd , SOFTMGM

tiechui  MYPC=/usr/bin/vim /etc/my.cnf , /usr/bin/systemctl * mysqld , SOFTMGM

# niuben   localhost,mysql50=/usr/bin/vim /etc/httpd/conf/httpd.conf , /usr/bin/systemctl * httpd , /usr/bin/vim /etc/my.cnf , /usr/bin/systemctl * mysqld

niuben          MYPC=MYCMND , SOFTMGM , /sbin/* , !/sbin/ifconfig  eth0

	2.2.6 启用日志
		]# vim  /etc/sudoers 
		   Defaults  logfile="/var/log/sudo"
		:wq!

三、SSH访问控制
	]# vim  /etc/ssh/sshd_config
				
	:wq
	]# systemctl restart sshd

	3.1  sshd基本安全配置
		]# vim /etc/ssh/sshd_config
		 port  2222
		:wq
		]# systemctl  restart  sshd

		客戶端端連接
		 ]# ssh  -p 2222  root@192.168.4.50

	3.2  sshd黑/白名单配置
		3.2.1 白名单配置
		      ]# vim /etc/ssh/sshd_config
			AllowUsers  root@192.168.4.254  niuben
			:wq

		     ]# systemctl  restart  sshd

		3.2.2 黑名单配置
		    ]# vim /etc/ssh/sshd_config
			  #AllowUsers  root@192.168.4.254  niuben
			  DenyUsers   root  niuben  
			:wq
		     ]# systemctl  restart  sshd	

	3.3  sshd登陸验证方式控制
		]# vim /etc/sshd/sshd_config
			# port 2222
			# DenyUsers   root  niuben
		]# systemctl restart sshd

		3.3.1 口令認證登陸(默認配置)
			65 PasswordAuthentication yes
	
		3.3.2 SSH密钥对验证
			43 #PubkeyAuthentication yes
			47 AuthorizedKeysFile      .ssh/authorized_keys

		例子：配置50主机仅支持ssh密钥对认证登陆
		    办公室电脑254 创建密钥对 并包公钥文件传给50主机
	        	    ]# ssh-keygen
			    ]# ssh-copy-id  root@192.168.4.50
			    ]# ls /root/.ssh
				公钥加密 id_rsa.pub   
                        	私钥解密 id_rsa
		   50主机禁止口令认证登陆 并重启ssh服务
		       ]# vim /etc/ssh/sshd_config
			PasswordAuthentication no
		   	:wq
			]# systemctl restart sshd
		   在254 主机连接接 50主机
			 ssh  root@192.168.4.50  允许且无需输入root密码
			 ssh  niuben@192.168.4.50 不允许连接

		   在家里的电脑上 和出差的电脑上都可以ssh 50主机
		  	把254 主机的私钥拷贝给家里的电脑
		  	把254 主机的私钥拷贝给出差使用的笔记本电脑 
  		休息到 17：05

四、SELinux安全防护
	4.1 SELinux 介绍 
		]# rpm  -qa  | grep  -i selinux

	4.2 查看当前系统SElinux的状态信息 
	[root@mysql50 ~]# sestatus 
SELinux status:                 enabled
SELinuxfs mount:                /sys/fs/selinux
SELinux root directory:         /etc/selinux
Loaded policy name:             targeted
Current mode:                   permissive
Mode from config file:          permissive
Policy MLS status:              enabled
Policy deny_unknown status:     allowed
Max kernel policy version:      28

	4.3 SELinux主配置文件
		]# vim /etc/sysconfig/selinux
			SELINUX=permissive 
			SELINUXTYPE=targeted
	4.4  设为强制模式 ]# setenforce  1

	     [root@mysql50 ~]# getenforce 
Permissive
[root@mysql50 ~]# 
[root@mysql50 ~]# setenforce  1
[root@mysql50 ~]# 
[root@mysql50 ~]# getenforce 
Enforcing
[root@mysql50 ~]# setenforce  0
[root@mysql50 ~]# 
[root@mysql50 ~]# getenforce 
Permissive
[root@mysql50 ~]# 


    4.5 SELinux策略设置
         	4.5.1 查看安全上下文
			]# ps  aux -Z  | grep  -i  httpd
			]# ls -ldZ /root
			]# ls -lZ /etc/passwd

		4.5.2 安全上下文
			用户:角色:访问类型:选项
			system_u:system_r:httpd_t:s0

			system_u:object_r:admin_home_t:s0

			system_u:object_r:httpd_config_t:s0


		4.5.3 一般操作规律:
		       新创建的文件会自动继续父目录的访问类型
		       复制的文件会自动继承目标目录的访问类型
		       移动的文件会keep原有的上下文属性不变
		
		4.5.4 修改安全上下文
			]# chcon -t 访问类型  文件
			]# chcon -R  -t 访问类型 目录

			]# chcon  -t httpd_sys_content_t a2.html

			]# chcon -R  -t httpd_sys_content_t /var/www/html

		4.5.5 恢复为所在位置的默认上下文属性
			]# restorecon /var/www/html/a2.html
			]# restorecon -R /var/www/html

		4.5.6 调整SELinux布尔值
			4.5.6.1 SELinux布尔值是功能开关
			4.5.6.2 查看SELinux布尔值 
				]# getsebool  -a
				]# getsebool  -a  | grep  -i mysql
				]# getsebool  -a  | grep  -i httpd

			4.5.6.3	设置SELinux布尔值
				]# setsebool -P 选项 off
				]# setsebool -P 选项 on

			例子：启用selinux后，允许客户端访问50主机的ftp服务，
			      匿名用户对服务器的/var/ftp/sharedir目录
			      有上传文件和下载文件权限
				1 ]# setenforce  1

				2 配置ftp服务
				
					]# yum  -y  install vsftpd
	
					]# vim /etc/vsftpd/vsftpd.conf
					   29 anon_upload_enable=YES
					:wq

					]# mkdir /var/ftp/sharedir

					]# chmod o+w  /var/ftp/sharedir/

					]# cp /etc/passwd  /var/ftp/sharedir/

					]# systemctl  start vsftpd
					
					]# netstat -utnlp  | grep  :21

				3 客户端51 访问 ftp服务上传 或 下载 文件（上传文件失败）
					]# yum  -y  install   ftp
					]#  ftp  192.168.4.50
					ftp-->回车->ls --> cd sharedir 

					get  passwd  下载文件 
					lcd /etc  --->  put  hosts 上传文件

				4 在50 主机 设置selinux布尔值后允许 上传文件
				        ]# setsebool -P ftpd_anon_write on
					]# setsebool -P ftpd_full_access on
		

		4.5.7 查看SELinux日志排错
				]# rpm -qa  | grep  -i  setroubleshoot
				]# ls /var/log/messages
		例子：50主机 启用selinux后，设置本机httpd服务使用8060端口。
		      ]# setenforce  1

		      ]#vim /etc/httpd/conf/httpd.conf
			  listen  8060
		      :wq

		      ]#systemctl  restart  httpd     报错
			
		      ]# grep setroubleshoot /var/log/messages | tail -1  查看日志信息

		      ]# sealert -l 79088842-a5c0-4e7b-8a5f-65418c73fed7  查看排错命令

		      ]# semanage port -a -t http_port_t -p tcp 8060

		      ]# systemctl  restart  httpd

		      ]# netstat -utnlp  | grep  :8060	
  休息到  10 ： 10
+++++++++++++++安全与监控_DAY02
一、文件加密与解密
	1.1 概念介绍
	1.2 加密算法
	1.3 gpg介绍 : 对称加密 非对称加密 数字签名
		]# gpg --help
		]# gpg --version

	1.4 例子
	 	]# useradd usera
 	 	]# useradd userb
  		]# echo 123456  | passwd --stdin  usera
  		]# echo 123456  | passwd --stdin  userb
	        ]# ssh  -X   usera@localhost
	     	]# ssh  -X   userb@localhost

		1.4.1 gpg 对称加/解密
			加密 usera
	       			]# vim  a.txt
				aaaa
				bbbb
				cccc
				:wq
				]# gpg  -c  a.txt  （要输入加密口令）
			
				]# mv  a.txt.gpg  /tmp/

			解密 userb
				]# cp /tmp/a.txt.gpg  ./
				]# gpg  -d  a.txt.gpg  > my.txt  (要输入解密口令)
				]# cat my.txt

		1.4.2 gpg 非对称加/解密
			  使用密钥对 对数据做加解密。
			  	公钥加密
			  	私钥解密
			  非对称加/解密过程。

			  使用root用户修改 使用的随机函数,加快密钥对创建速度  (14:15)
				]# ls /dev/random
				]# ls /dev/urandom
				]# mv /dev/random  /dev/random2
				]# ln -s /dev/urandom /dev/random
			  userb:
				1创建密钥对
					]$ rm -rf ~/.gnupg
					]$ gpg --gen-key
					]$ ls ~/.gnupg/
				2导出公钥 
					]$ gpg  -a  --export  > /tmp/userb.pub
					]$ cat  /tmp/userb.pub
			 usera:   
				1 导入公钥
					]$ rm -rf ~/.gnupg
					]$ gpg --import /tmp/userb.pub
				2 加密文件
					]$ gpg -e -r userb  test.txt
					]$ cat test.txt.gpg
					]$ mv  test.txt.gpg  /tmp/
			 userb:
				1解密文件
					]$ ls /tmp/test.txt.gpg
					]$ cp /tmp/test.txt.gpg  ~/
					]$ gpg -d  test.txt.gpg > b.txt (输入私钥密码)
				2查看文件内容
					]$ cat b.txt

		1.4.3 gpg 数字签名(作用保证数据的完整性)

			userb:
				1 使用私钥做数字签名
					]$ cat a2.txt 
						FFFF
						WWW
						ZZZZZ
					]$ gpg  -b a2.txt (需要输入私钥密码)
				2 共享签名文件和原文件
					]$ mv a2.txt*  /tmp/
			
			usera:
				1 使用公钥验证签名
[usera@room9pc17 ~]$ cat /tmp/a2.txt

[usera@room9pc17 ~]$ gpg --verify /tmp/a2.txt.sig

gpg: 于 2019年03月07日 星期四 14时25分23秒 CST 创建的签名，使用 RSA，钥匙号 DEE97BB4
gpg: 完好的签名，来自于“userb (userb-password) <panglj@tedu.cn>”
gpg: 警告：这把密钥未经受信任的签名认证！
gpg:       没有证据表明这个签名属于它所声称的持有者。
主钥指纹： 2E4F 549A 5DF3 DAFE DE99  D1AC 257C 9C5B DEE9 7BB4

二、AIDE入侵检测系统
	2.1 介绍： 入侵检测系统 

	2.2 运行服务
		装包  
			]# yum  -y  install aide
		休息到 15：30  练习10分钟到15：40 	
	2.3 配置入侵检测目录及调用检测规则 
		]# sed -i  '99,312s/^/#/' /etc/aide.conf
		]# vim  /etc/aide.conf
		   /root/	FIPSR
		:wq
	2.4 生成数据库文件 
		]# aide --init
		]# ls /var/lib/aide/

		]# cp  /var/lib/aide/aide.db.new.gz  /tmp/

		]# mv  /var/lib/aide/aide.db.new.gz  /var/lib/aide/aide.db.gz

       2.5 对入侵检测目录下的文件做操作
		]# cd /root

		]# rm  -rf  anaconda-ks.cfg

		]# vim  test.txt

		]# vim initial-setup-ks.cfg
			aaaaa
		:wq

       2.6 做入侵检测
		[root@mysql50 ~]# aide --check
		AIDE 0.15.1 found differences between database and filesystem!!
		Start timestamp: 2019-03-07 15:18:15
		Summary:
  		Total number of files:	1758
  		Added files:			1
  		Removed files:		1
  		Changed files:		2

三、扫描与抓包  深圳中心掉线了 等 5分钟  【 休息到16：05 】
	3.1 扫描 nmap
		3.1.1 软件介绍

		3.1.2 安装软件包 
			]# which  nmap
			]# yum  -y  install nmap

		3.1.3 命令用法 
			]# nmap  [扫描类型]  [选项]  <扫描目标 ...>
			]# man nmap

		3.1.4 例子  15 分钟 到 16：43

			]# nmap  192.168.4.51

			]# nmap -sP 172.40.56.100

			]# nmap -sP 172.40.56.100-200

			]# nmap -sP 172.40.56.0/24

			]# nmap -sP 172.40.56.110,118,129

			]# nmap  -sS  192.168.4.51

			]# nmap  -sS -p 80  192.168.4.51	

			]# nmap  -sS -p 80,3306,27051  192.168.4.51

			]# nmap  -sS -p 21-80,3306,27017,6351  192.168.4.51

			]# nmap  -A 127.0.0.1

			]# nmap  -A 192.168.4.51
	
	3.2 抓包 tcpdump
		3.2.1 tcpdump介绍 
			一款提取TCP数据包的命令行工具
	
		3.2.2 基本用法
			]# rpm -q tcpdump
			]# which  tcpdump
			]# tcpdump  [选项]  [过滤条件]
			]# man tcpdump
			
		3.3.3 例子  
			必备选项的使用 （ 练习10分钟 到 17：15 休息10分钟到 17：25 ）
			-i  -c   -A  -r  -w
			]# tcpdump 
			]# tcpdump  -i br1
			]# tcpdump  -i br1  -c 2
			]# tcpdump  -i br1  -c 2  -A
			]# tcpdump  -i br1  -c 2  -A  -w  /tmp/plj.cap
			]# tcpdump  -A -r /tmp/plj.cap
		
		       根据过滤条件抓包
				类型：host、net、port、portrange
				方向：src、dst
				协议：tcp、udp、ip、wlan、arp、icmp ……
				多个条件组合：and、or、not

			10mins

			]# tcpdump -i br1  icmp

			]# tcpdump -i br1  icmp  and  host 172.40.56.118

			]# tcpdump  -i br1  tcp  port 80 and host 172.40.56.118
			
			]# tcpdump  -i br1  tcp  port 22

		3.3 图形抓包软件 WireShark
			安装软件   
			]# yum  -y  install  wireshark  wireshark-gnome
			]# rpm -qa | grep  -i  WireShark
				wireshark-1.10.14-7.el7.x86_64
				wireshark-gnome-1.10.14-7.el7.x86_64
 			打开转包软件
				应用程序--互连网---软件名	
			
			WireShark可以把tcpdump命令的抓包文件打开查看抓包内容
				1 使用tcpdump命令 抓包并保存到文件里
		                  ]# tcpdump  -i br1  -A   -c 2  -w /tmp/ssh.cap tcp port 22

				2 使用WireShark打开抓包文件
		应用程序--互连网---软件名--> file ---> open --/tmp/ssh.cap

+++++++++++++++++安全与监控_day03
删除当前的虚拟机 50  ，
重新创建1台虚拟机，
ip地址是 192.168.4.50 
配置yum源 
停止防火墙服务 
禁用selinux

拷贝软件包 到50主机
apache-tomcat-9.0.6.tar.gz  
nginx-1.12.2.tar.gz

一、系统审计
	1.1 审计服务介绍（什么是审计）
	1.2 与服务相关的命令
		ausearch工具，可以根据条件过滤审计日志
		aureport工具，可以生成审计报告

	1.3 部署审计服务audit
		1.3.1 装包
		]# rpm  -q audit
			audit-2.7.6-3.el7.x86_64	

		1.3.2 服务的主配置文件
			]# vim /etc/audit/auditd.conf
			     log_file = /var/log/audit/audit.log	//日志文件
			:wq

			]# ls /var/log/audit/audit.log

			]# cat -b  /var/log/audit/audit.log

		1.3.3 查看服务运行信息
			]# systemctl enable auditd
			]# systemctl status auditd	

		1.3.4 配置审计(管理员root 定义审计规则)
			1.3.4.1 命令行定义（立即生效）
				]# auditctl --help
[root@mysql50 ~]# auditctl -l
No rules
[root@mysql50 ~]# 
[root@mysql50 ~]# auditctl -s
enabled 1
failure 1
pid 636
rate_limit 0
backlog_limit 8192
lost 0
backlog 0
loginuid_immutable 0 unlocked
[root@mysql50 ~]# 
[root@mysql50 ~]# 
[root@mysql50 ~]# auditctl -D
No rules
[root@mysql50 ~]# 

[root@mysql50 ~]# which  fdisk
/usr/sbin/fdisk
[root@mysql50 ~]# 
[root@mysql50 ~]# auditctl  -w /usr/sbin/fdisk -p x -k disk_one
[root@mysql50 ~]# 
[root@mysql50 ~]# auditctl  -l
-w /usr/sbin/fdisk -p x -k disk_one
[root@mysql50 ~]# 
[root@mysql50 ~]# 
[root@mysql50 ~]# auditctl  -w /etc/passwd -p rwa -k passwd_change
[root@mysql50 ~]# 
[root@mysql50 ~]# auditctl  -l
-w /usr/sbin/fdisk -p x -k disk_one
-w /etc/passwd -p rwa -k passwd_change
[root@mysql50 ~]# 

			

			1.3.4.2 永久配置（写进配置文件）
			  ]# vim /etc/audit/rules.d/audit.rules
				 -w /usr/sbin/fdisk -p x -k disk_one
				 -w /etc/passwd -p rwa -k passwd_change
			  :wq


		       1.3.4.3 测试 定义的审计规则
				1 查看审计日志信息
				]# ausearch -k passwd_change
				]# ausearch -k disk_on

		       1.3.4.4 审计日志分析 
				type=CWD msg=audit(1552009801.478:194):  cwd="/"
type=SYSCALL msg=audit(1552009801.478:194): arch=c000003e syscall=2 success=yes exit=3 a0=7f226f476432 a1=80000 a2=1b6 a3=24 items=1 ppid=938 pid=1897 auid=0 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=8 comm="crond" exe="/usr/sbin/crond" subj=system_u:system_r:crond_t:s0-s0:c0.c1023 key="passwd_change
	
二、服务安全
	2.1 网站服务安全
		2.1.1 nginx服务
			 	37  tar  -zxvf nginx-1.12.2.tar.gz 
   				38  cd nginx-1.12.2/
   				42  yum  -y  install gcc  pcre-devel openssl-devel
   				43  ./configure --prefix=/usr/local/nginx
   				44  make
   				45  make install
				]# vim /usr/local/nginx/conf/nginx.conf
					server {
						autoindex on ;
					}
				:wq
				[root@mysql50 nginx-1.12.2]# /usr/local/nginx/sbin/nginx  -t
nginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is ok
nginx: configuration file /usr/local/nginx/conf/nginx.conf test is successful
[root@mysql50 nginx-1.12.2]# 
[root@mysql50 nginx-1.12.2]# 
[root@mysql50 nginx-1.12.2]# /usr/local/nginx/sbin/nginx
[root@mysql50 nginx-1.12.2]# 
[root@mysql50 nginx-1.12.2]# netstat -utnlp  | grep nginx
tcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      6313/nginx: master  
[root@mysql50 nginx-1.12.2]#

		测试
   53  mkdir /usr/local/nginx/html/bbs
   54  echo 123 > /usr/local/nginx/html/bbs/a1.html
   55  echo 456 > /usr/local/nginx/html/bbs/a2.html
   56  echo 789 > /usr/local/nginx/html/bbs/a3.html
 
	http://192.168.4.50/bbs  (暴露所有的网页文件)

		解决办法1  echo abc > /usr/local/nginx/html/bbs/index.html

		
		解决办法2： 禁用一些不需要的模块
			]# /usr/local/nginx/sbin/nginx -s stop
			nginx-1.12.2]# ./configure  --prefix=/usr/local/nginx  \
					--without-http_autoindex_module
			nginx-1.12.2]# make  &&  make  install 

			]# /usr/local/nginx/sbin/nginx
			

			修改nginx版本信息 
				]# curl -I http://192.168.4.50/
 				   Server: nginx/1.12.2

				]# /usr/local/nginx/sbin/nginx -s stop
				]# cd nginx-1.12.2
				]# vim +48 src/http/ngx_http_header_filter_module.c
						
				]# ./configure  --prefix=/usr/local/nginx  \
                                        --without-http_autoindex_module

				]# make  &&  make  install
				]# vim /usr/local/nginx/conf/nginx.conf
                                        server {
                                                #autoindex on ;
                                        }

				]# /usr/local/nginx/sbin/nginx -t
				]# /usr/local/nginx/sbin/nginx
				]# netstat -utnlp  | grep  :80

				]# curl -I http://192.168.4.50/
				   Server: IIS 

			限制nginx 接收1台机器的并发连接数量

				]# /usr/local/nginx/sbin/nginx -s stop

				]# vim /usr/local/nginx/conf/nginx.conf
				http{
                       limit_req_zone $binary_remote_addr zone=one:10m rate=1r/s;

					server {
						limit_req zone=one burst=5;
				:wq

				]# /usr/local/nginx/sbin/nginx -t
				]# /usr/local/nginx/sbin/nginx
				]# netstat -utnlp  | grep  :80

				]# ab -n 10  -c 10 http://192.168.4.50/
					Complete requests:      10
					Failed requests:        4

				]# ab -n 100 -c 100 http://192.168.4.50/
					Complete requests:      100
					Failed requests:        94

			配置nginx服务，拒绝非法请求
				请求方法有那些 ? GET POST HEAD DELETE  PUT

				配置 只接受GET POST的访问方式
				]# /usr/local/nginx/sbin/nginx -s stop
  				]# vim /usr/local/nginx/conf/nginx.conf

				server {
        				if ($request_method !~ ^(GET|POST)$ ) {
                     				return 444;
               			         }
  				:wq
				]# /usr/local/nginx/sbin/nginx -t
   				]# /usr/local/nginx/sbin/nginx 
   				]# netstat  -utnlp  | grep  :80
					
[root@room9pc17 nsd1811]# curl -i -X HEAD  "http://192.168.4.50/bbs/a1.html"
curl: (52) Empty reply from server

 
[root@room9pc17 nsd1811]# curl -i -X GET  "http://192.168.4.50/bbs/a1.html"
HTTP/1.1 200 OK
Server: IIS 
Date: Fri, 08 Mar 2019 06:09:30 GMT
Content-Type: text/html
Content-Length: 4
Last-Modified: Fri, 08 Mar 2019 02:48:10 GMT
Connection: keep-alive
ETag: "5c81d7ea-4"
Accept-Ranges: bytes

123
				防止nginx服务运行时，buffer溢出
				
				http{
					client_body_buffer_size  1K;
					client_header_buffer_size 1k;
					client_max_body_size 16k;
					large_client_header_buffers 4 4k;


			2.1.2 tomcat服务
				1 在50主机上运行tomcat服务
					1.1 装包
					 ]# tar -zxvf apache-tomcat-8.0.30.tar.gz 
  					 ]# mv apache-tomcat-8.0.30 /usr/local/tomcat

					1.2 启动服务
					 ]# /usr/local/tomcat/bin/startup.sh

					1.3 查看服务信息	
					 ]# netstat -utnlp  | grep  :8080


					2.4 编写网页文件 并访问
				 ]# echo  "ABC" > /usr/local/tomcat/webapps/ROOT/test.html
				 ]# curl  http://192.168.4.50:8080/test.html
					  ABC
					
				隐藏版本信息
				]# yum  -y  install java-1.8.0-openjdk-devel
				]# cd /usr/local/tomcat/lib/

				]# jar -xf  catalina.jar
				
				]# vim  org/apache/catalina/util/ServerInfo.properties	
					server.info=IIS
					server.number=9.0.31.0
				:wq

				]# vim /usr/local/tomcat/conf/server.xml
				69 <Connector port="8080" protocol="HTTP/1.1"
 				70                connectionTimeout="20000"
 				71                redirectPort="8443" server="jacob" />
				:wq

				]# /usr/local/tomcat/bin/shutdown.sh
				]# /usr/local/tomcat/bin/startup.sh
				]# netstat -utnlp  | grep  :8080

			降权启动
				]# /usr/local/tomcat/bin/shutdown.sh
				]# useradd tomcat
				]# chown -R tomcat:tomcat /usr/local/tomcat/
				]# su - -c "/usr/local/tomcat/bin/startup.sh"  tomcat
				]# ps aux |  grep  java

			设置源码服务开机运行
				]# vim  /etc/rc.local 
				 su - -c "/usr/local/tomcat/bin/startup.sh"  tomcat
				:wq

				]# chmod +x  /etc/rc.local

	2.2 mariadb数据库服务
		2.2.1  在50主机安装mariadb-server 软件提供mysql数据库服务
			]# yum  -y  install   mariadb-server  mariadb
			]# systemctl  start mariadb
  			]# systemctl  enable mariadb
  			]# netstat -utnlp  | grep  :3306
  			]# ps -C mysqld

		2.2.1 优化 mariadb数据库服务
				1  执行初始化安全脚本
				]# mysql_secure_installation

		2.2.2 操作系统管理员root 修改数据库管理员本机登陆密码
			]# mysqladmin  -hlocalhost -uroot  -p password "新密码"


		2.2.3 管理员root 使用sql命令修改 本机登陆密码
		      > set password for  root@"localhost"=password("redhat");

		2.2.4 删除记录历史命令的文件
			]# rm  ~/.mysql_history
			]# rm  ~/.bash_history
			]# history -c

		2.2.5 定期对数据做备份 


		2.2.6 添加授权用户时，给添加的用户select 和 insert 权限 

		休息到  16：25  

三、Linux安全之打补丁
	3.1 


	例子
	50
	mkdir  /demo
	cd /demo
	vim v1.sh
	#!/bin/bash
	echo  "hello boy"
	:wq

      51:
	mkdir /demo
	
      50: scp  /demo/v1.sh  root@192.168.4.51:/demo/
	 ]# cd /demo
	 ]# cp  v1.sh  v1_1.sh
	 ]# vim v1_1.sh
	    #!/bin/bash
             echo  "hello boy"
	     echo  "hello girl"
        :wq

	]#diff  -u  v1.sh  v1_1.sh 
	]#diff  -u  v1.sh  v1_1.sh  > one.patch  创建补丁文件
	
        scp  /demo/one.patch  root@192.168.4.51:/demo/
 
     51:
	]# cd /demo
	]# yum -y install patch
	]# patch help
	]# which  patch
	]# man patch 
	]# patch  -p0  -i  one.patch    打补丁
	]# cat v1.sh

	休息到 17：25

	例子2

	50:
	]# cd /demo
	]# rm -rf *
	[roo@svr7 demo]# mkdir {source1,source2}
	[roo@svr7 demo]# echo "hello world"       > source1/test.sh
	[roo@svr7 demo]# echo "hello the world" > source2/test.sh
	[roo@svr7 demo]# echo "test" > source2/tmp.txt
	[roo@svr7 demo]# cp /bin/find source1/
	[roo@svr7 demo]# cp /bin/find source2/
[	roo@svr7 demo]# echo "1" >> source2/find

	]# diff -uraN /demo/source1 /demo/source2  >  /root/plj.patch
	]# scp  -r source1  root@192.168.4.51:/demo/

	]# scp /root/plj.patch root@192.168.4.51:/


     51:
	]# cd /demo
	]# patch  -p2 -i /plj1.patch 
		patching file source1/find
		patching file source1/test.sh
		patching file source1/tmp.txt
       ]# cd source1/
       ]# ls
	  find  test.sh  tmp.txt
++++++++++++++++安全与监控_DAY04++++++++++++++++iptables防火墙服务
REHL7  防火墙服务 firewalld
RHEL6  防火墙服务 iptables 

一、iptables防火墙
	1.1 iptables防火墙 介绍
	1.2 装包运行服务
	1.3 iptables防火墙的组成
		1.3.1 四张表（表是功能分类）
			raw    状态跟踪
			mangle 打标记
			nat    地址转换  ***
			filter 过滤      ***  (默认表)

		1.3.2 五条链（链是数据表传输的方向）
			INPUT         匹配进入防火墙本机的数据包
			OUTPUT		匹配从防火墙本机出去的数据包
			FORWARD		匹配经过防火墙本机的数据包
			POSTROUTING	路由后
			PREROUTING	路由前
	
	        1.3.2 每条链内有多条规则
		      规则的匹配顺序？
			顺序比对，匹配即停止（LOG除外）
			若无任何匹配，则按该链的默认策略处理

	2.4 使用iptables命令管理iptables防火墙服务
	    2.4.1 iptables命令用法？
	        ]#iptables  [-t 表名]  选项  [链名]  [条件]  [-j 目标操作]


		选项？
		 -L  -n  -A  -I   -D   -F   -P   --line-numbers

		条件的表示？

		目标操作类型？
			ACCEPT：允许通过/放行
			DROP：直接丢弃，不给出任何回应
			REJECT：拒绝通过，必要时会给出提示
			LOG：记录日志，然后传给下一条规则

例子 10分钟 到 10：38
	
]# iptables -L
]# iptables -nL
]# iptables -nL  INPUT  --line-numbers
]# iptables -t nat -nL --line-numbers
]# iptables -t nat -nL INPUT  --line-numbers

]# iptables -t filter -F
]# iptables -t nat -F
]# iptables -t mangle -F
]# iptables -t raw -F

]# iptables -t filter -nL
]# iptables -t raw -nL
]# iptables -t nat -nL
]# iptables -t mangle -nL

练习 10 分钟 到  10：53 
  204  iptables -t filter -L

  205  iptables -t filter  -nL INPUT 

  206  iptables -t filter  -A INPUT -p tcp -j ACCEPT 

  207  iptables -t filter  -nL INPUT 

  208  iptables -t filter  -nL INPUT  --line-numbers

  209  iptables  -I INPUT -p udp -j ACCEPT

  210  iptables -t filter  -nL INPUT  --line-numbers

  211  iptables  -I INPUT 2 -p icmp -j ACCEPT

  212  iptables -t filter  -nL INPUT  --line-numbers

  213  iptables  -D INPUT 1 

  214  iptables -t filter  -nL INPUT  --line-numbers

  215  iptables  -F INPUT 

  216  iptables -t filter  -nL INPUT  --line-numbers

	]# iptables -t filter -P FORWARD DROP

	]# iptables -t filter  -nL

	]# iptables -t filter -P FORWARD ACCEPT

	休息到  11：15


二、匹配条件
 2.1 基本匹配条件
 2.2 扩展匹配

三、filter表控制(主机型防火墙 和网络型防火墙)
	3.1 主机型防火墙 (在服务器本机运行防火墙服务)
		filter  ---->  INPUT
  	300  iptables -t filter  -A INPUT -s 192.168.4.254 -p tcp --dport 22 -j ACCEPT
  	301  iptables -t filter  -nL

  	302  iptables -t filter  -P INPUT  DROP
  	303  iptables -t filter  -nL
  
  	305  iptables -t filter  -nL
  	306  iptables -t filter  -nL INPUT --line-numbers

  	307  iptables -t filter -A INPUT -p tcp --dport 80 -j ACCEPT
  	308  iptables -t filter  -nL INPUT --line-numbers

  	309  echo  123 > /usr/local/nginx/html/a.html
  	310  echo  456 > /usr/local/tomcat/webapps/ROOT/b.html
  	311  netstat -utnlp  | grep  :8080

  	312  iptables -t filter -A INPUT -p tcp --dport 8080 -j ACCEPT
  	313  iptables -t filter  -nL INPUT --line-numbers

  	允许客户端访问50主机的3306 端口 和 ping 50 主机。
	]# iptables -t filter -A INPUT -p tcp --dport 3306 -j ACCEPT
	mysql> grant all on  bbsdb.*  to yaya@"%" identified by "123456";

	]# iptables -t filter -A INPUT -p icmp -j ACCEPT


	允许本机 ping 其他主机 ,但是，禁止其他主机 ping 本机
	]# iptables -t filter -nL INPUT --line-numbers
	]# iptables -t filter -D INPUT 5

	]# iptables -t filter -A INPUT -p icmp --icmp-type echo-reply -j ACCEPT
 	]# iptables -t filter -nL INPUT --line-numbers

	ping操作的请求包类型叫 echo-request
        ping操作的应答包类型叫 echo-reply


	扩展匹配条件： 使用 -m 选项


]# iptables -t filter -I INPUT -p tcp -m multiport --dport 22,80,8080,3306    -j ACCEPT
]# iptables -t filter -D INPUT 2
]# iptables -t filter -D INPUT 2
]# iptables -t filter -D INPUT 2
]# iptables -t filter -D INPUT 2
]# iptables -t filter -nL INPUT --line-numbers


]# iptables -t filter -A INPUT -p icmp --icmp-type echo-request \
   -m iprange  --src-range 192.168.4.51-192.168.4.56 -j ACCEPT

]# iptables -t filter -nL INPUT --line-numbers


]# iptables  -A  INPUT  -m   mac  \
  --mac-source  00:0C:29:74:BE:21  -j  DROP



	3.2 网络型防火墙(防火墙服务主机部署在2个网络之间)
		filter ----->  FORWARD

	50：
	 ]# ifconfig  eth0
	 ]# ifconfig  eth1
	 ]# sysctl  -a  | grep   net.ipv4.ip_forward
		net.ipv4.ip_forward = 1
	51:
		]# ifconfig  eth0 
        	]# systemctl  stop NetworkManager 
        	]# route add default gw  192.168.4.50  添加网关
        	]# route del  default gw  192.168.4.50 删除网关
        	]# route -n   查看网关
	52:
	]# ifconfig  eth0
        ]# systemctl  stop NetworkManager        
        ]# route add default gw  192.168.4.50  添加网关    
        ]# route del  default gw  192.168.4.50 删除网关       
        ]# route -n   查看网关
	53:
		]# ifdown eth0
		]# ifconfig eth1 
		]# systemctl  stop NetworkManager
        	]# route add default gw  192.168.2.50  添加网关
        	]# route del  default gw  192.168.2.50 删除网关
        	]# route -n   查看网关  
   
       50

	        [root@mysql50 ~]# iptables -t filter -P INPUT ACCEPT
		[root@mysql50 ~]# iptables -t filter -F INPUT 
		[root@mysql50 ~]# iptables -t filter -P FORWARD DROP

	53
		414  rpm  -q httpd
  		415  echo   web53 > /var/www/html/test.html
  		416  systemctl  restart httpd
		     ]# netstat -utnlp  | grep  :80

	50
		]# iptables -t filter -A FORWARD  -p tcp --dport 80 -j ACCEPT 放行访问
		]# iptables -t filter -A FORWARD  -p tcp --sport 80 -j ACCEPT 放行应答
		]# iptables -t filter -nL FORWARD --line-numbers

		]# iptables -t filter -A FORWARD -p tcp --dport 22  -j ACCEPT
                ]# iptables -t filter -A FORWARD -p tcp --sport 22  -j ACCEPT

	51 和 52 
		[root@mysql51 ~]# curl  http://192.168.2.53/test.html
		web53		


	53 
		]# ssh root@192.168.4.51
		]# ssh root@192.168.4.52


四、nat表典型应用 （所有局域网内网的主机共享同一个公网ip地址上网）
		nat -----> POSTROUTING

	53
		[root@mysql53 ~]# route del default gw 192.168.2.50
		[root@mysql53 ~]# route -n
		[root@mysql53 ~]# ifconfig  eth1
			       ]# ping -c 2 192.168.2.50

		echo  web53  > /var/www/html/test2.html
		]# netstat -utnlp | grep  :80

	50
		]# iptables -t filter -F FORWARD
		]# iptables -t filter -P FORWARD ACCEPT
		]# iptables -t nat -F
		]# iptables -t nat -nL

		]# iptables -t nat -A POSTROUTING -s 192.168.4.0/24 -p tcp --dport 80 \
		    -j SNAT --to-source 192.168.2.50


		或

		]# iptables -t nat -A POSTROUTING -s 192.168.4.0/24 -p tcp --dport 80 \
		-j MASQUERADE


		]# iptables -t nat -nL POSTROUTING

	53 
		]# tcpdump  -i eth1  port 80

	51 或 52  
		]# curl http://192.168.2.53/test2.html

+++++++++++++++++服务安全与监控_day05+++++++++++++++++++
一、监控概述
	1.1 监控的目的
	1.2 监控的资源类别
	1.3 监控软件

二、Zabbix基础  
	2.1  Zabbix 软件介绍

	2.2  部署Zabbix服务运行环境----LNMP

		2.2.1 安装源码nginx
		  ]# rpm  -q gcc  pcre-devel openssl-devel zlib-devel
		  ]# tar -zxvf  nginx-1.12.2.tar.gz
		  ]# cd nginx-1.12.2/
		  ]# ./configure --prefix=/usr/local/nginx
		  ]# make
		  ]# make install

		2.2.2 安装php-fpm
		  ]# yum -y install php-fpm-5.4.16-42.el7.x86_64.rpm

		2.2.3 安装mariadb-server
		  ]# yum -y  install  php  php-mysql
		  ]# yum -y  install  mariadb-server  mariadb-devel  mariadb
	
		2.2.4 运行nginx服务
		  ]# vim /usr/local/nginx/conf/nginx.conf
			65  location ~ \.php$ {
            			root           html;
            			fastcgi_pass   127.0.0.1:9000;
            			fastcgi_index  index.php;
            			include        fastcgi.conf;
        		 }
		 :wq
		  ]# /usr/local/nginx/sbin/nginx
		  ]# netstat -utnlp  | grep  :80

		2.2.5 运行php-fpm服务
		  ]# systemctl  start php-fpm
		  ]# netstat -utnlp  | grep  :9000

		2.2.6 运行mariadb服务
		  ]# systemctl  start  mariadb
		  ]# netstat -utnlp  | grep  :3306
 休息到 10:25
		2.2.7 测试配置
		 ]# vim /usr/local/nginx/html/test.php
			<?php
			    $i=33;
			    echo $i;
			?>
		 :wq

		 ]# curl  http://localhost/test.php
		   33

	2.3  部署Zabbix服务
		2.3.1 修改nginx配置文件设置服务运行，满足Zabbix服务的运行需求
			
		]# vim /usr/local/nginx/conf/nginx.conf
			http {
        			fastcgi_buffers 8 16k;       
        			fastcgi_buffer_size 32k;      
        			fastcgi_connect_timeout 300; 
        			fastcgi_send_timeout 300;    
        			fastcgi_read_timeout 300;
		   :wq
		]# /usr/local/nginx/sbin/nginx  -t
		]# /usr/local/nginx/sbin/nginx  -s stop
		]# /usr/local/nginx/sbin/nginx
			
		2.3.2  安装源码Zabbix软件包
	         ]# yum -y install  net-snmp-devel curl-devel
 
		 ]# tar -zxvf zabbix.tar.gz
		 ]# cd Zabbix
		 ]# yum -y install libevent-devel-2.0.21-4.el7.x86_64.rpm 

                 ]# tar -zxvf zabbix-3.4.4.tar.gz
		 ]# cd zabbix-3.4.4
		 ]# ./configure  --prefix=/usr/local/zabbix \
                    --enable-server --enable-proxy --enable-agent \
		    --with-mysql=/usr/bin/mysql_config \
                    --with-net-snmp --with-libcurl
		
		]# make  install

		]# ls /usr/local/zabbix/
		   bin  etc  lib  sbin  share

 
		2.3.3 初始化Zabbix
		    1 创建数据库与授权用户
			]# mysql
			> create database zabbix character set utf8;
			> grant all on  zabbix.*  to zabbix@"localhost" 
			  identified by "zabbix";

		    2 创建表
			]# cd zabbix-3.4.4
			]# cd database/mysql/
			]# mysql -uzabbix -pzabbix  zabbix < schema.sql
			]# mysql -uzabbix -pzabbix  zabbix < images.sql
			]# mysql -uzabbix -pzabbix  zabbix < data.sql
			]# mysql -uzabbix -pzabbix  zabbix
			> show tables;

		    3 创建web页面
			]# cd zabbix-3.4.4/frontends
			]# cp -r php  /usr/local/nginx/html/zabbix		
			]# ls /usr/local/nginx/html/zabbix/

		    4 访问web页面做初始化配置
			4.1 初始化配置准备
				]# vim /etc/php.ini
				  672 post_max_size = 16M
				  384 max_execution_time = 300
				  394 max_input_time = 300
				  878 date.timezone = Asia/Shanghai
				:wq
			    ]# yum  -y  install php-mbstring-5.4.16-42.el7.x86_64.rpm 
  			    ]# yum  -y  install php-bcmath-5.4.16-42.el7.x86_64.rpm 
  
  			    ]# yum -y  install php-gd php-xml  php-ldap
  			    ]# systemctl  restart  php-fpm

			    ]# chmod o+w /usr/local/nginx/html/zabbix/conf/

			4.2 打开真机的浏览器
			    http://192.168.2.5/zabbix/index.php
			     1 欢迎页面
			     2 环境检测
			     2 数据库配置
			     3 指定监控服务器信息
			     4 配置摘要信息
			     4 初始化完成
			     5 登陆管理页面
				 用户名 admin
				 密码   zabbix
			4.3 查看初始化配置
			  ]# cat /usr/local/nginx/html/zabbix/conf/zabbix.conf.php

		2.3.4 启动zabbix_server服务		
			1 修改服务主配置文件
				]# vim /usr/local/zabbix/etc/zabbix_server.conf
					38 LogFile=/tmp/zabbix_server.log
					85 DBHost=localhost
					95 DBName=zabbix
					111 DBUser=zabbix
					119 DBPassword=zabbix
				:wq
			2 创建服务启动脚本
			  ]# cd zabbix-3.4.4/
			  ]# cp misc/init.d/fedora/core/zabbix_server /etc/init.d/
			  ]# chmod  +x /etc/init.d/zabbix_server
		]#sed -i '22s;/usr/local;/usr/local/zabbix;' /etc/init.d/zabbix_server
		]# sed -n '22p' /etc/init.d/zabbix_server

			3 启动服务
			   ]# useradd zabbix
			   ]# /etc/init.d/zabbix_server start 启动服务命令
			   ]# /etc/init.d/zabbix_server stop  停止服务命令

			4 查看服务信息
	                ]# netstat -utnlp  | grep  :10051
                        tcp  0  0 0.0.0.0:10051    0.0.0.0:*  LISTEN  14541/zabbix_server 
三、Zabbix监控服务
	3.1 监控服务基本使用
		1 把页面语言修改为中文
		2 修改管理员admin密码
		3 查看监控服务可以使用的监控模板
		4 查看监控了那些主机
		5 查看监控数据

	3.2 监控本机
		3.2.1 被监控主机操作
		      在本机运行zabbix_agentd服务
		  	3.2.1.1 修改zabbix_agentd服务的主配置文件
				]# vim /usr/local/zabbix/etc/zabbix_agentd.conf
					30 LogFile=/tmp/zabbix_agentd.log
					93 Server=127.0.0.1
					134 ServerActive=127.0.0.1:10051
					69 EnableRemoteCommands=1
					280 UnsafeUserParameters=1
				:wq
			3.2.1.2 启动zabbix_agentd服务
				]# cd zabbix-3.4.4
				]# cp misc/init.d/fedora/core/zabbix_agentd  /etc/init.d/
				]# chmod  +x /etc/init.d/zabbix_agentd
				]# vim  +22 /etc/init.d/zabbix_agentd
					BASEDIR=/usr/local/zabbix
				:wq
				]# /etc/init.d/zabbix_agentd start
			3.2.1.3 查看zabbix_agentd服务信息	
				]# netstat -utnlp  | grep  :10050


		3.2.2 监控服务器操作
			登陆管理页面，做如下配置
			2.1 添加监控主机 并 选择监控目标
		  	2.2 查看监控数据
       
	练习到 16：15 

	3.3 监控远端主机 
		3.3.1 客户端配置192.168.2.100
			1 运行zabbix_agentd服务
				1.1 装包
					]# rpm -q gcc || yum  -y install gcc
					]# rpm -q pcre-devel || yum  -y install pcre-devel
					]# tar -zxvf zabbix-3.4.4.tar.gz 
  					]# cd zabbix-3.4.4/
					]# ./configure  --prefix=/usr/local/zabbix \
					   --enable-agent
  					]# make install
					]# ls /usr/local/zabbix/

				1.2 修改配置文件
					]# vim /usr/local/zabbix/etc/zabbix_agentd.conf
					30 LogFile=/tmp/zabbix_agentd.log
					93 Server=127.0.0.1,192.168.2.5
					134 ServerActive=192.168.2.5:10051
					:wq
				1.3 启动服务
		]# cp zabbix-3.4.4/misc/init.d/fedora/core/zabbix_agentd /etc/init.d/
				]# vim +22 /etc/init.d/zabbix_agentd 
					 BASEDIR=/usr/local/zabbix
				:wq
		]# useradd zabbix
		]# chmod  +x  /etc/init.d/zabbix_agentd
		]# /etc/init.d/zabbix_agentd start
			2 查看服务信息
  				]# netstat -utnlp | grep :10050
		练习到16：50  休息10分钟 到 17：00

		3.3.2 监控服务器配置192.168.2.5
			1 登陆管理页面，做如下配置
                           1.1 添加监控主机 并 选择监控目标
                           1.2 查看监控数据


	3.4 自定义监控项(客户端在本机定义监控命令 给监控服务器使用)
		3.4.1 客户端配置 192.168.2.100
			3.4.1.1  启用自定义监控项功能
			    ]# vim /usr/local/zabbix/etc/zabbix_agentd.conf
			     265 Include=/usr/local/zabbix/etc/zabbix_agentd.conf.d/*.conf				
			     280 UnsafeUserParameters=1
			:wq

			3.4.1.2  定义监控项（定义监控命令）
			 ]# vim  /usr/local/zabbix/etc/zabbix_agentd.conf.d/a1.conf
			    UserParameter=get_users,wc -l /etc/passwd | awk '{print $1}'
			  :wq

			3.4.1.3  重启zabbix_agentd服务
				]# /etc/init.d/zabbix_agentd stop
  				]# /etc/init.d/zabbix_agentd start				
			3.4.1.4  在本机测试定义监控项
  ]#  /usr/local/zabbix/bin/zabbix_get  --help
  ]#  /usr/local/zabbix/bin/zabbix_get  -s 127.0.0.1 -p 10050 -k get_users
  ]#  useradd yaya100
  ]#  useradd yaya200
  ]#  /usr/local/zabbix/bin/zabbix_get  -s 127.0.0.1 -p 10050 -k get_users



		3.4.2 监控服务器配置
			3.4.2.1 测试客户端自定义监控项
		]# /usr/local/zabbix/bin/zabbix_get -s 192.168.2.100 -p 10050 -k get_users
			
			3.4.2.2 登陆管理页面做如下操作：
				1 创建新模板  Atmp
				2 创建应用集  yyj1
				3 创建监控项  user_item  并定义调用的监控命令get_users
				4 监控主机192.168.2.100 使用新创建的模板Atmp
				5 查看监控数据

+++++++++++++++++服务安全与监控_day06+++++++++++++++++++
















